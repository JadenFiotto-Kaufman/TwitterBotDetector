node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "cond/Merge"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\323F\334\232-\371\243?\222$I\222$I\262\277t\321E\027]t\301?\314w\007\301\273T\244?\367\376\035\232\212L\244?\033\321\363\321t\316\267?\010\037|\360\301\007\237?\021\021\021\021\021\021\301?\023o\217\t}z\302?\021\021\021\021\021\021\221?h/\241\275\204\366\222?\353\257\376\352\257\376\300?\032\244A\032\244A\232?\301\030H4\005\177\307?\220\247\004yJ\220\327?P9\273\220V\217\306?\310\311Sv\333R\201\277\356\211\014\244\367\347\332?\232\231\231\231\231\231\231?\021\021\021\021\021\021\301?.<!W\353\302s?;+\375}x<\212?+\007\347Ad[\203?\222$I\222$I\262\277\307_\263\243\026!\277?&\277X\362\213%\277?YE\326%\315\250\255??\251\3725O\271\243?\360\007\374\001\177\300\177?\270\226\310\375\255%\322?\253\001o`M\333\263?\222$I\222$I\262\277t\345\001\311:W\216?\000\000\000\000\000\000\000\000\020\020\020\020\020\020\240?Y3\301A\326L\317?v\345\001\311:W^?\000\000\000\000\000\000\000\000\030\227\212\033^H\266?\220K\375\030\324\205\301?)\371I\331\nI\264?\355\340\367:u\344\205?\000\000\000\000\000\000\340?r\257\271\2204\245\222?\245\350aoT\212\236?n\257 L`\027z?\222$I\222$I\262\277\222$I\222$I\242\277\231\234\3553\270\351\266?s\263D8{\000\247?\214\325\223i>\351\263?\032\244A\032\244A\232?\355X\2010\322\216e?\234\231\231\231\231\231y\277\000\000\000\000\000\000\000\000\223T{\242\342\226\261?\273\272\001*\315\204\266?\000\000\000\000\000\000\340?S\360\000\227Ls\316?\'\3167\322x\342\274?c\003X\360h\250\312?\000\000\000\000\000\000\000\000\237\260\312\326w9\252?\315\314\314\314\314\314\344?\332\201\271v`\256\235?\355\033\326\276a\355\313?\334\261X\022\007\030\263?\270\007\367\247iE\273?\370\341\222\032\340\310\304?\362I\235\226\365\260\310?\323\323\323\323\323\323\253?\000\000\000\000\000\000\000\000\257W\352\366\277\225\244?W\026xe\201WF?\222$I\222$I\262\277N\033\350\264\201N\233?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000_\363\340\260\275\365\261?\361\305\255\302\340=\211?\000\000\000\000\000\000\000\000\334\266m\333\266m\313?P~\036g\010\372\256?\000\000\000\000\000\000\000\000h/\241\275\204\366\242?\222$I\222$I\262\277\216\035\3477\214\234\246?F\252\347\207\263\014\234?\\\307\025n\025\244\263?Tv\230\272\334\376\260?\024\024\024\024\024\024\224?\033\363\007\324\214\021\271?\222$I\222$I\242\277\000\000\000\000\000\000\000\000\222$I\222$I\262\277\027\326g\225\343T\264?2(\025&\336\217\234?\222$I\222$I\302?O\033\350\264\201Nk\277\000\000\000\000\000\000\000\000\030\206a\030\206a\250?\021\021\021\021\021\021\301?\205\336\201\267\021\265\310?\222$I\222$I\242\277\010?7\'\033z\276?\001\3727\261r|\263?\000\000\000\000\000\000\000\000\00465\227*M\251?\002UJ\346\241\307\276?d\354k\371\361\311\222?\035W\022\230\367\204\276?\004\377\367\236k\342\301?\222$I\222$I\262\277\370\177q.\\\177\264?6\005\234\206\363\234\247?\007\037|\360\301\007o?\311\251\265\201\255\211\307?\334\266m\333\266m\313?\000\000\000\000\000\000\000\000t\321E\027]t\261?p\037\301}\004\367\261?\374e\300(\327\016\261?\010\202 \010\202 \330?\000\000\000\000\000\000\000\000\006\232\252\200\256X\300?\334\266m\333\266m\313?m\211\351\237\220\245\306?\275.\223Hn9\263?\342[@v\262\037\250?\334\266m\333\266m\313?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?&\222q\"\031\'\274?a\226W\320\373\366\223?\222$I\222$I\262\277\315\205\244)\025g\302?d\223M6\331d\303?\000\000\000\000\000\000\240?\000\000\000\000\000\000\000\000\222$I\222$I\262\277\231\231\231\231\231\231\265?\305\212\352\177\255`\320?f\217\321\022\254+\257?\250\031\366\3342#\253?\"\"\"\"\"\"\242?,.\370\025\266\222\240?\032c\220]\211\027\260?\222$I\222$I\262\277VUUUUU\335?\2752\334O\277\342\267?i\371\376\004\206\313\305?\223$I\222$I\262?\3709\333Tp\177\264?-\021`1\364\r~?a\000\365>\336\322\214?\007.\3115\350\261\310?\030\206a\030\206a\230?T\341y\017\010\002\301?\222$I\222$I\242\277M\356\2530\':\224?/V\326QT\014t\277\231i\362,t\005\310?\000\000\000\000\000\000\000\000\232\231\231\231\231\231\321?h/\241\275\204\366\222?\240\364I\237\364I\257?\254\037\202\373\272=\253?Q\360a2\216\262\271?\n\262\255z\237\372\267?\017\020\020\020\020\020\200?\332\3712\022EG\223?\201Y\030\227\017\253\302?\200h\356L5\273\231?\222$I\222$I\262\277\000\000\000\000\000\000\000\000\317\221\010\030\013\300\307?\000\000\000\000\000\000\000\000\245^G\352u\244\336?\000\000\000\000\000\000\000\000\366\253\263\351c\273o?\020\004A\020\004A\220?\000\000\000\000\000\000\000\000\371o\3345\240\302\266?\036\324A\035\324A\235?\222$I\222$I\262\277\222$I\222$I\262\277\325N\355\324N\355\324?-e#\227z\266\320?\315\314\314\314\314\314\334?\277\n\230\365Ma\304?UUUUUU\225?M\356\2530\':\224?\000\000\000\000\000\000\340?\334\266m\333\266m\273?\232\231\231\231\231\231\271?\347\030\250\"\203\365\264?\310P\331a\352r\320?\000\000\000\000\000\000\340?\000\000\000\000\000\000\340?\342\275Q\213\330\335\261?\237\237\204\223\343\321\266?\034\307q\034\307q\234?\361\254h$\340\233\207?\373\232\014\377\315s\300?\226\273-\255\030\"\316?\222$I\222$I\262\277\222$I\222$I\262\277\354\230\340\301<Q\305?\222$I\222$I\262\277\222$I\222$I\262\277\337\274\232xV4\202?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\222$I\222$I\262\277d\223M6\331d\243?\021\021\021\021\021\021\221?*G\0107G\267\300?\265W\305\016\':\305?t\321E\027]t\301?\302\022U\255d\r\244?\252\000 \223\210\272a\277}\3012\035\203C\247?\000\000\000\000\000\000\320?\262c\377T-\333\303?\000\000\000\000\000\000\000\000m\"%\034\007\265\274?\000\000\000\000\000\000\000\000\252u?\245:\242\270?Qcow\242\343\261?\000\000\000\000\000\000\000\000Ud\242\232{\377\316?ZbO\275\322J\260?\307X\306\232\237=\270?h\215\326h\215\326\260?Wn\206\03614\246?\031\241\260\277P\371\235?n\322\267\016\354\216\267?\3278\315\312\335\203\311?\351\305\307\221\257O\312?UUUUUU\225?\243\270\3351#e\260?\222$I\222$I\262\277\323\204\360\025X\352m\277\000\000\000\000\000\000\340?\020\273\006?.\235\306?\217m\356y\365\210\274?\214\326\260\010am\266?\222$I\222$I\262\277V~B\234\225\237\240?\375\244\361\303\007\301\245?\000\000\000\000\000\000\000\000\340\274\010 \347f\263?\000\000\000\000\000\000\000\000\002P`N\025\324\213?\222$I\222$I\262\277t\321E\027]t\301?\021\021\021\021\021\021\321?\310)\310\215\230;\306?t\321E\027]t\301?\222$I\222$I\262\277\222$I\222$I\262\277\335\335\335\335\335\335\275?H\316\304,8\364\232?\305\177AVO\374\227?\315\314\314\314\314\314\344?,\210\232\363\267\260\270?\272J\033\r\315W\202\277!O\t\362\224 \237?\234\231\231\231\231\231\231\277\00494J|\310\262?\003c\233\366\203\254\243?|\206]\001r\257\241?\327\007%\357l\271\270?\334\314\366\310\036\257\227?n\335\245\266\'\325\275?333333\263\277\030\206a\030\206a\210?\000\000\000\000\000\000\000\000\007\037|\360\301\007\217?W9\343\225n\301\255?\266h\n\021\315E\220\277\000\000\000\000\000\000\000\000\222$I\222$I\262\277\020j\010\317\274\250\255?\032\244A\032\244A\232?\000\000\000\000\000\000\000\000\222$I\222$I\262\277\222$I\222$I\262\277\222cb\313J\377\236?\000\000\000\000\000\000\340?t\321E\027]t\261?\252\007\363W\323y\244?\034\307q\034\307q\254?\331\"\302\025/\367\301?\246\376\t\n\233R\250?\222$I\222$I\262\277\373M\257\204\370\301\275?\001\264\203\245\332\233\204?\335\340`\014]\034\303?UUUUUU\265?DDDDDD\324?*I\223\246\253\227\264?\222$I\222$I\262\277B\257\036\022\313#\273?\240\364I\237\364I\217?\"W\353\302\023r\275?O\033\350\264\201N\213?\332\201\271v`\256\215?\343/E\201AJ\301?#\\\250sG\000\247?\222$I\222$I\262\277\030\206a\030\206a\230?+\351K\305\2212\302?\014\361%\2050\230\217?l5\313O\020\231\255?\336\345\t\303\224\"\252?Rv.P\002\210\262?\222$I\222$I\262\277\236\021\340\031\001\236\221?Y\335\354*#\004\220?\253\377\354_\260\350\274?\222$I\222$I\242\27707\307H\177\337\230?\025l\301\026l\301\206\277\333.L2L\234\232?\222$I\222$I\262\277o\027\322qs\255\262?\217\032d\017\250\\\307?\030\206a\030\206a\250\277\222$I\222$I\262\277\222$I\222$I\262\277\225\224\224\224\224\224\204?\222$I\222$I\242?\0300\215\001\323\030\260?\346\n\3676\371\367\305?\304j\343)D\251\252?\222$I\222$I\262\277\222$I\222$I\262\277\256\232\210\270G\005\261?\272\216\371\003\037\241\326?\356=\301\257\343[\254?\000\000\000\000\000\000\000\000\007#mR\035Q\277?\023+u\205\375j\310?\354\266^U\357-\267?G}d=\0344\302?\222$I\222$I\262\277\307\035\013[-\356\244?333333\333?\344\027K~\261\344\227?\003\312\200w\372V\306?\354\332D\311\256M\244?\030\347\241cxq\236?z\277\254\367\313z\317?N\033\350\264\201N\213?\227\221N\346\265\261\333?\3111|?\310\334\257?\244m\224/\234N\230?\225\374\325\314)\222\270?@\333\210\261\220C\230?\337\206\235\363m\330\271?G\312\357\003\212\310\264?\n\243\314P\000\242\261?t\321E\027]t\301?\315\314\314\314\314\314\344?\030bf%d\327\251?\322E\027]t\321\265?333333\303?\000\000\000\000\000\000\000\000\347\313\001\226m\276\234?e>\312\270\321\323\273?\251\t\010M\333\256\276?\005r\217\212\037\264\267?\033\326\276a\355\033\226?\212\241\203\031I\210\302?z\257M\355\006\332\270?\300\002\251e+\016\270?&[\253\2301\246\301?\227W1(\001>\277?}K\001\231\344\024\301?\230\252\260\027\016\223\251?JzMK\321\271\272?\350\016\250X\264\024\272?}\322\'}\322\'\215?\000\000\000\000\000\000\340?\244\014<\335\232\037\226?\024\024\024\024\024\024\224?\222$I\222$I\262\277\000\000\000\000\000\000\000\000\367\351\2744W\253\303?\334\266m\333\266m\313?\000\000\000\000\000\000\000\000\211\262\303\247.\264\244?\241^\3130!\301\245?p(_u\203o\261?g\362;\204\3366\260?\222$I\222$I\262\277\001\241\344N\321\302y?\232\231\231\231\231\231\271\277\353Q\270\036\205\353\261?\216\216s\202\322\300\301?+\010\023\330\205\326\266?i\013\333\026\302\233\255?\222$I\222$I\242\277\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\244\244MN\033\365\260?\002\235\365\216\273\334\244?8B\031\275-k\265?\000\000\000\000\000\000\000\000\375\204\221h=\223\233?\206\276\253LV$\275?\000\000\000\000\000\000\000\000h/\241\275\204\366\222?\004\265Czi\275\231?\000\000\000\000\000\000\000\000\032\240\001\032\240\001\232?\000\000\000\000\000\000\340?\315\314\314\314\314\314\344?r\350\360\314%,\275?\222$I\222$I\242\277\222$I\222$I\262\277}\252M\251R\270\251?\222$I\222$I\262\277\000\000\000\000\000\000\340?<\316&\325\202\261\264?\260\005[\260\005[\300?\232\231\231\231\231\231\321?s\203\007x\037\016\301?:\264\310v\276\237z\277TZ\354\233\214\251\211?\000\000\000\000\000\000\000\000\334\266m\333\266m\313?|\001.\222\263\276\227?\222$I\222$I\262\2774r\004\364\311\316\304?\000\000\000\000\000\000\000\000x\331\332\234\336\206\314?\030\031\031\031\031\031\251?|Y3\372\303\357\277?\000\000\000\000\000\000\340?\000\000\000\000\000\000\340?\027l\301\026l\301\206?\222$I\222$I\262\277V~B\234\225\237\240?\222$I\222$I\262\277\031\206a\030\206a\250?\000\000\000\000\000\000\000\000g5c\360U?\267?\374\251\361\322Mb\200?j\300\350D|\260\221?\222$I\222$I\262\277\0238\201\0238\201\223?\024\024\024\024\024\024\224?\034\362s\005y\354\274?\301x+\373\034R\223?\000\000\000\000\000\000\000\000=\2061\312~\t\203?\021\021\021\021\021\021\241?UUUUUU\225?\367\rk\337\260\366\315?\227o\371\226o\371\246?t\321E\027]t\301?\345\215\337\307%$\310?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\276+\037\217[\272?Y\316\237\345\374Y\316?t\300n\217\265\014}?\000\000\000\000\000\000\000\000\3004\006Lc\300\264?\000\000\000\000\000\000\000\000t\321E\027]t\301?,\024\267Bq+\264?\000\000\000\000\000\000\000\000\321;9\204\005`\217?,\224I\375\3271\237?\340V(n\205\342\206?\232\231\231\231\231\231\271?\000\000\000\000\000\000\000\000\014^QS?\314\307?t\321E\027]t\301?s\345\001\311:Wn?\000\000\000\000\000\000\000\000\261|I\026\343\257\314?MA\350\037\335\306\224?P:\2556an\265?\326k\0247\335\334\251?\000\000\000\000\000\000\340?\351\226u\277\233O\266?\000\000\000\000\000\000\000\000J\\\374\273\253q\241?\315\314\314\314\314\314\344?C\001\267\373\351Y\277?\341RU\356b\230\277?\000\000\000\000\000\000\320?c\366~d\245\020\262?z\366V\372q\267\235?\021{\322K\236t\265?\017\021\021\021\021\021\261\277\002\215b\361M\345\311?\025P\001\025P\001\245?\000\000\000\000\000\000\000\000\304%q\024\256\255\300?\000\000\000\000\000\000\000\000p\037\301}\004\367\221?\232\231\231\231\231\231\271?\000\000\000\000\000\000\000\000\222$I\222$I\262\277\000\000\000\000\000\000\000\000ffffff\326?\355\370\231[l\206\272?\020\004A\020\004A\220?\232\231\231\231\231\231\231?\270\235\351\374\2035\200?{\266x\234\330\232\246\277UUUUUU\245?\035(\'\353:l\321?\000\000\000\000\000\000\340?x\355\375\354\233\207\311?\000\000\000\000\000\000\000\000N\033\350\264\201N\213?\222$I\222$I\262\277\017\345\210\3716A\230?\021\004A\020\004A\200?\000\000\000\000\000\000\000\000\222$I\222$I\262\277\000\000\000\000\000\000\340?\004\230\236\254\342\217\260?\000\000\000\000\000\000\000\000|A\021\321\250\\\300?t\321E\027]t\301?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\222V1i\025\223\206?5\'\201\270Ps\202?"
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\000\000\000\000\000\000\024@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000;@\000\000\000\000\000\000\000\000\000\000\000\000\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000&@\000\000\000\000\000\000\000\000\000\000\000\000\000\000&@\000\000\000\000\000\200F@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200F@\000\000\000\000\000\000\000@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\010@\000\000\000\000\000\000@@\000\000\000\000\000\200B@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\0002@\000\000\000\000\000\0001@\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\0006@\000\000\000\000\000\200P@\000\000\000\000\000\0004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\200G@\000\000\000\000\000\0005@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030@\000\000\000\000\000\000\010@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\0001@\000\000\000\000\000\000\"@\000\000\000\000\000\000\034@\000\000\000\000\000\000\000\000\000\000\000\000\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<@\000\000\000\000\000\0009@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000D@\000\000\000\000\000\000\000@\000\000\000\000\000\000A@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\200B@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001@\000\000\000\000\000\000\360?\000\000\000\000\000\0006@\000\000\000\000\000\000<@\000\000\000\000\000\000\000\000\000\000\000\000\000\000G@\000\000\000\000\000\000(@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\0009@\000\000\000\000\000\000\360?\000\000\000\000\000\200@@\000\000\000\000\000\000\024@\000\000\000\000\000\000\000\000\000\000\000\000\000\000&@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=@\000\000\000\000\000\000\360?\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\200E@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034@\000\000\000\000\000\200C@\000\000\000\000\000\000&@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000C@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024@\000\000\000\000\000\0009@\000\000\000\000\000\000\000\000\000\000\000\000\000\0009@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200@@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000&@\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000\000;@\000\000\000\000\000\0002@\000\000\000\000\000\000\360?\000\000\000\000\000\200F@\000\000\000\000\000\000&@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\0005@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\200G@\000\000\000\000\000\000\000\000\000\000\000\000\000\0000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200A@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009@\000\000\000\000\000\0001@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\010@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&@\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000\000\000\000\000\000\000*@\000\000\000\000\000\000\030@\000\000\000\000\000\000,@\000\000\000\000\000\000\000\000\000\000\000\000\000\0001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\0000@\000\000\000\000\000\000?@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(@\000\000\000\000\000\000?@\000\000\000\000\000\000\360?\000\000\000\000\000\200I@\000\000\000\000\000\000D@\000\000\000\000\000\000A@\000\000\000\000\000\000\030@\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\0009@\000\000\000\000\000\000\360?\000\000\000\000\000\000F@\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\000\000\000\000\000\000 @\000\000\000\000\000\000.@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000L@\000\000\000\000\000\000\000\000\000\000\000\000\000\000C@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000*@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000I@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=@\000\000\000\000\000\200G@\000\000\000\000\000\000\024@\000\000\000\000\000\000\360?\000\000\000\000\000\200@@\000\000\000\000\000\000B@\000\000\000\000\000\000\024@\000\000\000\000\000\0001@\000\000\000\000\000\200C@\000\000\000\000\000\0007@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000G@\000\000\000\000\000\0009@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\200@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\024@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000F@\000\000\000\000\000\000\000\000\000\000\000\000\000\000*@\000\000\000\000\000\0008@\000\000\000\000\000\000\360?\000\000\000\000\000\0008@\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008@\000\000\000\000\000\000\360?\000\000\000\000\000\000>@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=@\000\000\000\000\000\0006@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000*@\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\000\000\000\000\000\000@@\000\000\000\000\000\200B@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000C@\000\000\000\000\000\000\360?\000\000\000\000\000\000E@\000\000\000\000\000\000\360?\000\000\000\000\000\0004@\000\000\000\000\000\000\010@\000\000\000\000\000\000\000@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034@\000\000\000\000\000\000A@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\0004@\000\000\000\000\000\000\020@\000\000\000\000\000\000B@\000\000\000\000\000\000\000\000\000\000\000\000\000\0002@\000\000\000\000\000\000>@\000\000\000\000\000\000@@\000\000\000\000\000\000$@\000\000\000\000\000\000\360?\000\000\000\000\000\200@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000<@\000\000\000\000\000\000\000\000\000\000\000\000\000\000(@\000\000\000\000\000\000>@\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000=@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<@\000\000\000\000\000\000;@\000\000\000\000\000\000,@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000\"@\000\000\000\000\000\000.@\000\000\000\000\000\0009@\000\000\000\000\000\000?@\000\000\000\000\000\000\030@\000\000\000\000\000\000;@\000\000\000\000\000\000F@\000\000\000\000\000\000<@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200B@\000\000\000\000\000\0000@\000\000\000\000\000\000@@\000\000\000\000\000\000G@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020@\000\000\000\000\000\000,@\000\000\000\000\000\000G@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000:@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\0008@\000\000\000\000\000\000B@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000$@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030@\000\000\000\000\000\000\020@\000\000\000\000\000\200A@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\0005@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\0003@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000$@\000\000\000\000\000\000\000\000\000\000\000\000\000\200H@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000:@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000?@\000\000\000\000\000\000C@\000\000\000\000\000\000\000\000\000\000\000\000\000\0001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034@\000\000\000\000\000\000=@\000\000\000\000\000\000\000\000\000\000\000\000\000\0002@\000\000\000\000\000\000\000@\000\000\000\000\000\0004@\000\000\000\000\000\000\360?\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200D@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200N@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\0004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "qG\334\021w\304\275?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000H\341z\024\256G\301?\000\000\000\000\000\000\000\000{\024\256G\341z\304?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000q=\n\327\243p\275?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024;\261\023;\261\223?\000\000\000\000\000\000\000\000)\\\217\302\365(\254?\000\000\000\000\000\000\000\000\030\363\251\027\363\251\267?\236\330\211\235\330\211\315?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\315\314\314\314\314\314\314?\367\006\224\211+\335\213?\000\000\000\000\000\000\360?\222$I\222$I\262?\333\266m\333\266m\313?g\320\262\3439\225\304?A\255_)P\353\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026eQ\026eQ\306?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\245?\030\206a\030\206a\230?\000\000\000\000\000\000\000\000\030\206a\030\206a\270?\026eQ\026eQ\266?\n\327\243p=\n\247?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\270\036\205\353Q\270\216?\000\000\000\000\000\000\360?\000\000\000\000\000\000\340?8\321\323\271\275\226\274?UUUUUU\325?\267k\345\204g\372\273?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300?\000\000\000\000\000\000\000\000\024\256G\341z\024\316?\341z\024\256G\341\272?\000\000\000\000\000\000\000\000\343&\314\357jq\263?UUUUUU\305?F\027]t\321E\307?\000\000\000\000\000\000\000\000{\024\256G\341z\264?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\341z\024\256G\341\272?\341z\024\256G\341\272?\303\365(\\\217\302\265?A\321V\203\347\010\264?\025\025\025\025\025\025\245?\000\000\000\000\000\000\000\000g\320\262\3439\225\304?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022&a\022&a\302?\000\000\000\000\000\000\300?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\252\304?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\210\306\372\320X\037\312?\006\026X`\201\005\226?\303\365(\\\217\302\305?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000/,FBi\343\275?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?A\255_)P\353\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{\024\256G\341z\244?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\303\365(\\\217\302\265?\000\000\000\000\000\000\340?\343\225O\304l.\275?\201\371@va1\302?\000\000\000\000\000\000\000\000q=\n\327\243p\315?333333\303?\000\000\000\000\000\000\000\000g\267\360\2531\221~?\253\252\252\252\252\252\300?\000\000\000\000\000\000\360?\226Z\251\225Z\251\305?\232\231\231\231\231\231\231?\000\000\000\000\000\000\000\000)\\\217\302\365(\254?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000/,FBi\343\275?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\302\365(\\\217\302?\000\000\000\000\000\000\340?)\\\217\302\365(\274?\352Moz\323\233\276?\\\375\240\243\002_\314?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\270\036\205\353Q\270\216?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?{\024\256G\341z\224?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\325?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\201\371@va1\242?\366(\\\217\302\365\310?\343\225O\304l.\255?\000\000\000\000\000\000\000\000{\024\256G\341z\204?\256C\277\331:\364\313?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\201\204\237\\\210\272\231?\177\245@\255_)\300?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300?\002\241\344N\321\302y?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\352f\320\262\3439\305?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000)\\\217\302\365(\254?[\277R\240\326\257\224?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027l\301\026l\301\246?\000\000\000\000\000\000\000\0009\005/\247\340\345\244?H\341z\024\256G\301?:5\017r\327\317\306?\036\036\036\036\036\036\236?\315\314\314\314\314\314\314?)\\\217\302\365(\254?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\320\272\301\024\371\254\253?\341z\024\256G\341\272?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Zv<\247\222\002\242?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\037|\360\301\007\257?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\024\256G\341z\024\316?\000\000\000\000\000\000\000\000{\024\256G\341z\264?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\355\215\325\037\350\221\302?UUUUUU\265?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\361\223\013Q7\203\306?{\024\256G\341zt?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\177\245@\255_)\300?\033\312k(\257\241\274?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\270\036\205\353Q\270\216?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\361\002\231\024/\300?\374\370\361\343\307\217\257?\000\000\000\000\000\000\000\000\244p=\n\327\243\260?\270\036\205\353Q\270\236?\022&a\022&a\262?\000\000\000\000\000\000\000\000\303\365(\\\217\302\265?\000\000\000\000\000\000\000\000g\320\262\3439\225\224?\000\000\000\000\000\000\000\000{\024\256G\341z\264?\3449\225\024\220\360\303?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2328\214\325\326\337\256?\020\215\365\241\261>\304?\000\000\000\000\000\000\260?R\270\036\205\353Q\320?1ogH\314\333\311?\355q\025\020\014\311\306?\270\036\205\353Q\270\236?\270\036\205\353Q\270\216?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300?\000\000\000\000\000\000\360?\216\336\025\231/M\314?\000\000\000\000\000\000\000\000ogH\314\333\031\262?{\024\256G\341z\244?\322\244I\223&M\312?\000\000\000\000\000\000\360?\000\000\000\000\000\000\340?\022&a\022&a\322?\000\000\000\000\000\000\000\000\247B\264\341\363\307\314?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244p=\n\327\243\260?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000o\254\376@\217\224\320?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\302\365(\\\217\302?\024\256G\341z\024\316?\000\000\000\000\000\000\304?\000\000\000\000\000\000\340?\037\205\353Q\270\036\305?\n\327\243p=\n\307?\232\231\231\231\231\231\231?f\227]v\331e\267?\366(\\\217\302\365\310?q=\n\327\243p\275?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000q=\n\327\243p\315?\000\000\000\000\000\000\300?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\226Z\251\225Z\251\305?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\245\224RJ)\245\244?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000)\\\217\302\365(\314?\000\000\000\000\000\000\000\000TI\001\t?\271\260?\262\002a\244\035+\300?\000\000\000\000\000\000\360? tT\340\213\253\277?\000\000\000\000\000\000\000\000{\024\256G\341z\244?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013Y\310B\026\262\300?\000\000\000\000\000\000\360?jW\242v%j\307?\000\000\000\000\000\000\000\000^Cy\r\3455\244?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\341\250\376>o\303?UUUUUU\275?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000UUUUUU\305?\000\000\000\000\000\000\000\000\354Q\270\036\205\353\261?[\277R\240\326\257\304?\330\222C\\e\n\310?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000UUUUUU\205?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\210Y@\276H\224\312?\020\004A\020\004A\220?\300\034\221b\250\277\314?\000\000\000\000\000\000\360?\232\231\231\231\231\231\271?\270\036\205\353Q\270\216?UUUUUU\345?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\354Q\270\036\205\353\241?\303\365(\\\217\302\305?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\270\005\024Fu\232\274?{\024\256G\341z\224?\\e\n\230\017d\307?\000\000\000\000\000\000\000\000\341\345\024\274\234\202\267?333333\303?{\024\256G\341z\304?1ogH\314\333\251?\000\000\000\000\000\000\360?oz\323\233\336\364\306?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Zv<\247\222\002\262?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\327\243p=\n\247?\201\371@va1\302?\000\000\000\000\000\000\000\000\222$I\222$I\302?\362V\3669\244&\310?4\371\262A\223/\233?\000\000\000\000\000\000\000\000\217\302\365(\\\217\302?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006}A_\320\027\304?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ogH\314\333\031\302?H\341z\024\256G\301?\025\025\025\025\025\025\305?\000\000\000\000\000\000\000\000\222\033\271\221\033\271\301?F\027]t\321E\247?333333\263?e\223M6\331d\303?UUUUUU\305?\262\002a\244\035+\240?\327\337\036\330\350]\301?8\321\323\271\275\226\314?\355\215\325\037\350\221\302?UUUUUU\205?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\0009\005/\247\340\345\204?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\256G\341z\024\256\307?{\024\256G\341z\264?UUUUUU\305?}\037\253\331\223|\317?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000{\024\256G\341z\224?\345\027K~\261\344\307?X\372s\266\343C\320?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000y\025\211W\221x\305?\000\000\000\000\000\000\000\000{\024\256G\341zt?\000\000\000\000\000\000\000\0009\005/\247\340\345\304?\\e\n\230\017d{\024\256G\341z\224?i\361\312\'b6\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?Ava1\022J\273?\000\000\000\000\000\000\000\000AL\256 &W\260?\000\000\000\000\000\000\000\000R\270\036\205\353Q\270?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\340?\000\000\000\000\000\000\360?UUUUUU\325?\000\000\000\000\000\000\000\0001ogH\314\333\251?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\320?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\013Q7\203\226\275?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\270\036\205\353Q\270\216?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000p\037\301}z\024\256G\301?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\227\226\226\226\226\226\266?\000\000\000\000\000\000\000\000\3449\225\024\220\360\303?\347\322\241\006\2733\311?\000\000\000\000\000\000\000\000\303\365(\\\217\302\265?\000\000\000\000\000\000\000\000\274\336F\177($w?\000\000\000\000\000\000\000\000\354Q\270\036\205\353\241?\217\302\365(\\\217\302?\000\000\000\000\000\000\000\000\211D\"\221H$\302?g\320\262\3439\225\204?4O\250\005\214I\274?UUUUUU\325?qBJ\236eD\237?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2328\214\325\326\337\276?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=\n\327\243p=\312?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\205\353Q\270\036\205\323?\222$I\222$I\222?{\024\256G\341z\204?\000\000\000\000\000\000\000\000\232\231\231\231\231\231\271?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\030\206a\030\206a\230?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\354Q\270\036\205\353\261?\000\000\000\000\000\000\000\000\n\327\243p=\n\247?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\327\243p=\n\247?\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content`@\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000\000\010@\000\000\000\000\000\000W@\000\000\000\000\000\200Z@\000\000\000\000\000\000E@\000\000\000\000\000\000\000\000\000\000\000\000\000@X@\000\000\000\000\000\000\000\000\000\000\000\000\000\000A@\000\000\000\000\000\000\010@\000\000\000\000\000\000.@\000\000\000\000\000\0008@\000\000\000\000\000\300]@\000\000\000\000\000\000\010@\000\000\000\000\000\200\\@\000\000\000\000\000@X@\000\000\000\000\000\300b@\000\000\000\000\000\240a@\000\000\000\000\000\000\000\000\000\000\000\000\000`g@\000\000\000\000\000\000J@\000\000\000\000\000\000h`@\000\000\000\000\000\000\000@\000\000\000\000\000\200\\@\000\000\000\000\000\340h@\000\000\000\000\000\000\000\000\000\000\000\000\000\0007@\000\000\000\000\000\000\000\000\000\000\000\000\000\200T@\000\000\000\000\000\000X@\000\000\000\000\000\200af@\000\000\000\000\000\0004@\000\000\000\000\000\200T@\000\000\000\000\000\000\000\000\000\000\000\000\000@X@\000\000\000\000\000\240ec@\000\000\000\000\000\000I@\000\000\000\000\000\000\000\000\000\000\000\000\000\240`@\000\000\000\000\000\000\000\000\000\000\000\000\000\000.@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024@\000\000\000\000\000\200S@\000\000\000\000\000\000Y@\000\000\000\000\000 b@\000\000\000\000\000\000E@\000\000\000\000\000\240f@\000\000\000\000\000@Q@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\240b@\000\000\000\000\000\200Q@\000\000\000\000\000\000\000@\000\000\000\000\000\300\\@\000\000\000\000\000 c@\000\000\000\000\000\200E@\000\000\000\000\000\000\030@\000\000\000\000\000\000*@\000\000\000\000\000@R@\000\000\000\000\000\000\360?\000\000\000\000\000\000I@\000\000\000\000\000\200f@\000\000\000\000\000\000^@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\200D@\000\000\000\000\000\000\030@\000\000\000\000\000\340a@\000\000\000\000\000\200Z@\000\000\000\000\000\200C@\000\000\000\000\000\000?@\000\000\000\000\000\200W@\000\000\000\000\000\300\\@\000\000\000\000\000\000N@\000\000\000\000\000\000\000\000\000\000\000\000\000\000A@\000\000\000\000\000\200P@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\240fc@\000\000\000\000\000\0001@\000\000\000\000\000\000<@\000\000\000\000\000\200V@\000\000\000\000\000\000?@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300`@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200E@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\024@\000\000\000\000\000\000\000\000\000\000\000\000\000\0004@\000\000\000\000\000\0003@\000\000\000\000\000\200E@\000\000\000\000\000\000K@\000\000\000\000\000\000\000\000\000\000\000\000\000\200c@\000\000\000\000\000@g@\000\000\000\000\000 b@\000\000\000\000\000\000\360?\000\000\000\000\000@X@\000\000\000\000\000\000\360?\000\000\000\000\000@Z@\000\000\000\000\000\000\360?\000\000\000\000\000\000]@\000\000\000\000\000\300X@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\300`@\000\000\000\000\000\200U@\000\000\000\000\000\000\030@\000\000\000\000\000\200R@\000\000\000\000\000@Z@\000\000\000\000\000\200S@\000\000\000\000\000@`@\000\000\000\000\000\000\\@\000\000\000\000\000\000.@\000\000\000\000\000@]@\000\000\000\000\000\000\000\000\000\000\000\000\000\300[@\000\000\000\000\000\000\000\000\000\000\000\000\000@Y@\000\000\000\000\000\300[@\000\000\000\000\000\000>@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200R@\000\000\000\000\000\0004@\000\000\000\000\000\000R@\000\000\000\000\000\000\360?\000\000\000\000\000\300bf@\000\000\000\000\000\000[@\000\000\000\000\000\200Z@\000\000\000\000\000\000Z@\000\000\000\000\000\000\000\000\000\000\000\000\000\000;@\000\000\000\000\000\0007@\000\000\000\000\000\0005@\000\000\000\000\000\200S@\000\000\000\000\000\000c@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000[@\000\000\000\000\000\200H@\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@[@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\300U@\000\000\000\000\000\000>@\000\000\000\000\000\200_@\000\000\000\000\000\000_@\000\000\000\000\000\000\000\000\000\000\000\000\000\200W@\000\000\000\000\000\200I@\000\000\000\000\000\200[@\000\000\000\000\000\0002@\000\000\000\000\000\000\000\000\000\000\000\000\000@Y@\000\000\000\000\000\000\000\000\000\000\000\000\000\000J@\000\000\000\000\000\200F@\000\000\000\000\000\200F@\000\000\000\000\000\000,@\000\000\000\000\000\0006@\000\000\000\000\000\000V@\000\000\000\000\000\200_@\000\000\000\000\000\000\000\000\000\000\000\000\000\000*@\000\000\000\000\000\000@@\000\000\000\000\000\000=@\000\000\000\000\000@b@\000\000\000\000\000\300R@\000\000\000\000\000\000Z@\000\000\000\000\000\000\000\000\000\000\000\000\000\000=@\000\000\000\000\000\200V@\000\000\000\000\000\000@@\000\000\000\000\000\000\360?\000\000\000\000\000\300W@\000\000\000\000\000\000O@\000\000\000\000\000\300T@\000\000\000\000\000\000\000\000\000\000\000\000\000@\\@\000\000\000\000\000```@\000\000\000\000\000\200_@\000\000\000\000\000@R@\000\000\000\000\000@S@\000\000\000\000\000\200_@\000\000\000\000\000\000^@\000\000\000\000\000\200N@\000\000\000\000\000\300Y@\000\000\000\000\000@V@\000\000\000\000\000\000\000\000\000\000\000\000\000\200I@\000\000\000\000\000\0000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000$@\000\000\000\000\000\000L@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000Z@\000\000\000\000\000\240b@\000\000\000\000\000\200Y@\000\000\000\000\000\300P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000J@\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\000\000\000\000\000\300a@\000\000\000\000\000\000>@\000\000\000\000\000\200S@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\200U@\000\000\000\000\000@Y@\000\000\000\000\000\300d@\000\000\000\000\000\000\360?\000\000\000\000\000\300T@\000\000\000\000\000@Q@\000\000\000\000\000\000\024@\000\000\000\000\000\0001@\000\000\000\000\000\000L@\000\000\000\000\000\000\360?\000\000\000\000\000\0003@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\340c@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 `@\000\000\000\000\000\000\030@\000\000\000\000\000\000\000\000\000\000\000\000\000\200^@\000\000\000\000\000@h@\000\000\000\000\000\300^@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\0005@\000\000\000\000\000\000\000\000\000\000\000\000\000@V@\000\000\000\000\000\000\010@\000\000\000\000\000\0002@\000\000\000\000\000\000.@\000\000\000\000\000\200I@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\300_@\000\000\000\000\000\200h@\000\000\000\000\000@U@\000\000\000\000\000\000\000\000\000\000\000\000\000\000:@\000\000\000\000\000\0000@\000\000\000\000\000\300X@\000\000\000\000\000\000I@\000\000\000\000\000\000=@\000\000\000\000\000\000h@\000\000\000\000\000\000\"@\000\000\000\000\000\000.@\000\000\000\000\000\000\360?\000\000\000\000\000\0007@\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q@\000\000\000\000\000\000\360?\000\000\000\000\000\000B@\000\000\000\000\000\000W@\000\000\000\000\000\000\000\000\000\000\000\000\000\000G@\000\000\000\000\000\000\"@\000\000\000\000\000\000\000@\000\000\000\000\000\000\034@\000\000\000\000\000\000\000\000\000\000\000\000\000\0003@\000\000\000\000\000\000 @\000\000\000\000\000\340g@\000\000\000\000\000\200a@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\360?\000\000\000\000\000\000J@\000\000\000\000\000\000\000\000\000\000\000\000\000\200g@\000\000\000\000\000\000\360?\000\000\000\000\000\000(@\000\000\000\000\000\000E@\000\000\000\000\000@W@\000\000\000\000\000\300[@\000\000\000\000\000\000\000\000\000\000\000\000\000\300]@\000\000\000\000\000\0002@\000\000\000\000\000\340b@\000\000\000\000\000\000\000\000\000\000\000\000\000``@\000\000\000\000\000\300V@\000\000\000\000\000\000\360?\000\000\000\000\000\000R@\000\000\000\000\000\300f@\000\000\000\000\000\000Z@\000\000\000\000\000\000\360?\000\000\000\000\000@Q@\000\000\000\000\000\000&@\000\000\000\000\000\000\000@\000\000\000\000\000\200V@\000\000\000\000\000\000*@\000\000\000\000\000\0002@\000\000\000\000\000\000\360?\000\000\000\000\000\0000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\000T@\000\000\000\000\000\0004@\000\000\000\000\000\0003@\000\000\000\000\000\240g@\000\000\000\000\000\300V@\000\000\000\000\000\200H@\000\000\000\000\000\300U@\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000\000\000\000\000\000\360?\000\000\000\000\000\0008@\000\000\000\000\000\000\000\000\000\000\000\000\000\000T@\000\000\000\000\000\000D@\000\000\000\000\000\0002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`a@\000\000\000\000\000\000\020@\000\000\000\000\000\000X@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000\000\000\000\000\000`f@\000\000\000\000\000\000B@"
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\006}A_\320\027\344?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R\270\036\205\353Q\344?\274\273\273\273\273\273\353?\217\302\365(\\\217\332?=\317\363<\317\363\354?UUUUUU\345?R\270\036\205\353Q\330?\000\000\000\000\000\000\356?\216\3438\216\3438\356?\007i\220\006i\220\346?\236\330\211\235\330\211\355?\327\243p=\n\327\333?\000\000\000\000\000\000\000\000\032\254\320\031\254\320\331?\261\023;\261\023;\341?\222$I\222$I\322?ffffff\356?UUUUUU\325?\207\362\032\312k(\357?)\\\217\302\365(\340?Y\037\032\353Cc\355?\000\000\000\000\000\000\000\000\222$I\222$I\342?\333\266m\333\266m\313?\224\013Q7\203\226\335?w\206\304\274\235!\341?\320\027\364\005}A\357?\000\000\000\000\000\000\000\000`\375\325_\375\325\337?\000\000\000\000\000\000\000\000\216\3438\216\3438\356?\000\000\000\000\000\000\360?<<<<<<\354?\000\000\000\000\000\000\340?\216\3438\216\3438\356?\000\000\000\000\000\000\360?\3234M\3234M\343?`\375\325_\375\325\337?\000\000\000\000\000\000\350?8\340\361\207\003\036\357?\000\000\000\000\000\000\000\000\354Q\270\036\205\353\355?\026\323YLg1\355?\270\036\205\353Q\270\356?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\257%\207\270\312\024\340?Cb\336\316\220\230\327?&C\260\2166\357\343?\236\330\211\235\330\211\355?Cy\r\3455\224\357?\000\000\000\000\000\000\350?\000\000\000\000\000\000\360?\366(\\\217\302\365\330?{\024\256G\341z\340?\000\000\000\000\000\000\000\000T:\262g *\275?UUUUUU\325?F\027]t\321E\307?\000\000\000\000\000\000\360?\354Q\270\036\205\353\341?\000\000\000\000\000\000\000\000\323\233\336\364\2467\355?\000\000\000\000\000\000\000\000{\024\256G\341z\340?\315\314\314\314\314\314\340?\341z\024\256G\341\332?\352Moz\323\233\336?\030\030\030\030\030\030\350?\000\000\000\000\000\000\360?\234A\313\216\347T\342?\327\243p=\n\327\357?\000\000\000\000\000\000\000\000q=\n\327\243p\355?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360? \370\201\037\370\201\337?ffffff\346?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000UUUUUU\341?\000\000\000\000\000\000\360?\034\307q\034\307q\354?\000\000\000\000\000\000\000\000\254\017\215\365\241\261\336?\217<\362\310#\217\354?\366(\\\217\302\365\330?UUUUUU\345?\036\036\036\036\036\036\356?m\274\243\232\365g\340?\000\000\000\000\000\000\340?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\0009\216\3438\216\343\330?\'\233l\262\311&\353?\000\000\000\000\000\000\340?q=\n\327\243p\355?\000\000\000\000\000\000\360?%I\222$I\222\354?\000\000\000\000\000\000\000\000ffffff\306?\000\000\000\000\000\000\340?\"fs\351P\203\335?\377\014~\023=\235\333?\000\000\000\000\000\000\360?\270\036\205\353Q\270\326?ffffff\332?\037\205\353Q\270\036\355?\240rv\013\277\032\303?UUUUUU\333?\000\000\000\000\000\000\000\000`\375\325_\375\325\337?\256G\341z\024\256\353?F\027]t\321E\357?\327\243p=\n\327\333?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\340?(\257\241\274\206\362\352?R\315\3723\370M\344?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?H\341z\024\256G\331?\000\000\000\000\000\000\000\000\205\353Q\270\036\205\323?\352Moz\323\233\342?=\211L\303v\263\334?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000R\270\036\205\353Q\350?\256\354sHM0\356?\000\000\000\000\000\000\000\000H\341z\024\256G\345?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\356?UUUUUU\325?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\344?\317\355\265\344\020W\331?\000\000\000\000\000\000\340?\010z\244\204\234\n\350?\000\000\000\000\000\000\354?\366(\\\217\302\365\354?\250\021\226{\032a\331?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\230&\016c\265\365\347?K\201Z\277R\240\326?UUUUUU\345?ffffff\342?tHM0\336\312\356??\351\223>\351\223\356?UUUUUU\345?n\333\266m\333\266\355?\265\365\267\0076z\327?\000\000\000\000\000\000\340?\023\332Kh/\241\355?\315\314\314\314\314\314\354?e\223M6\331d\343?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000}\322\'}\322\'\355?UUUUUU\345?\326\207\306\372\320X\347?\366(\\\217\302\365\340?\252y\220\273~\266\330?------\355?\024\256G\341z\024\336?ffffff\342?\236\330\211\235\330\211\355?\000\000\000\000\000\000\000\000}\326\r\246\310g\355?\037\205\353Q\270\036\325?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\262\332\372\333\003\033\355?\236\347y\236\347y\356?\000\000\000\000\000\000\360?N6\331d\223M\346?\333\266m\333\266m\353?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\327\243p=\n\267?\000\000\000\000\000\000\000\000H\341z\024\256G\331?\000\000\000\000\000\000\356?\023\332Kh/\241\355?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\341\326\336X\375\201\336?UUUUUU\305?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000xE\346K\023\207\341?q=\n\327\243p\351?\216\3438\216\3438\356?\336\335\335\335\335\335\355?\027]t\321E\027\335?\257\241\274\206\362\032\312?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000q=\n\327\243p\345?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\351\223>\351\223\356?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\027]t\321E\027\355?ffffff\356?m\035\372\315\326\241\337?\275z\365\352\325\253\327?\000\000\000\000\000\000\000\000\366(\\\217\302\365\350?\303\365(\\\217\302\355?\270|\313\267|\313\347?\000\000\000\000\000\000\340?\n\327\243p=\n\337?\000\000\000\000\000\000\360?\364\256\310|i\342\340?\000\000\000\000\000\000\360?\217\302\365(\\\217\342?_\2328\214\325\326\337?\000\000\000\000\000\000\360?\034\307q\034\307q\314?,2_\2328\214\345?\005/\247\340\345\024\334?\000\000\000\000\000\000\330?\256G\341z\024\256\327?\370\340\203\017>\370\340?\256\002\202!\331\"\332?\315\314\314\314\314\314\344?\354Q\270\036\205\353\341?\000\000\000\000\000\000\356?\270\036\205\353Q\270\342?\000\000\000\000\000\000\000\000\271\020u3h\331\341?\000\000\000\000\000\000\000\000\375J\201Z\277R\340?\303\365(\\\217\302\341?\322\244I\223&M\332?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\230\204I\230\204I\330?\000\000\000\000\000\000\360?\271\026\tj*D\333?\000\000\000\000\000\000\360?\346O[h\300\222\356?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\345?\256G\341z\024\256\337?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\345?\246C\rvg2\332?}\326\r\246\310g\355?\000\000\000\000\000\000\000\000{\024\256G\341z\334?\354Q\270\036\205\353\341?\000\000\000\000\000\000\340?\000\000\000\000\000\000\340?\270\036\205\353Q\270\336?\000\000\000\000\000\000\340?\366(\\\217\302\365\354?\225RJ)\245\224\342?\366(\\\217\302\365\340?\244p=\n\327\243\340?\000\000\000\000\000\000\000\000\267m\333\266m\333\356?\000\000\000\000\000\000\360?\214.\272\350\242\213\356?\366(\\\217\302\365\330?R\270\036\205\353Q\350?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\222\033\271\221\033\271\341?vb\'vb\'\356?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\204\020B\010!\354?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\327\243p=\n\327\333?\253\252\252\252\252\252\352?%\005$\374\344B\344?&N\375\236[\342\344?\000\000\000\000\000\000\000\000_\\\375\240\243\002\337?tHM0\336\312\356?\232\231\231\231\231\231\341?/\272\350\242\213.\352?\000\000\000\000\000\000\000\000Y\310B\026\262\220\341?\000\000\000\000\000\000\000\000K\324\256D\355J\324?\000\000\000\000\000\000\356?(\257\241\274\206\362\342?\336\335\335\335\335\335\355?\352Moz\323\233\356?o\223\3562\246|\335?\000\000\000\000\000\000\345?\000\000\000\000\000\000\000\000n\333\266m\333\266\355?\032\244A\032\244A\332?\037|\360\301\007\037\354?\\\217\302\365(\\\347?>\370\340\203\017>\330?\212\236\316\355\265\344\340?\000\000\000\000\000\000\000\000\357\275\367\336{\357\355?\000\000\000\000\000\000\356?\340\351\326\374\260H\311?\000\000\000\000\000\000\340?\3657\350v\255\234\340?\337\367}\337\367}\357?h\334\255\363\nh\334?\000\000\000\000\000\000\000\000\024\256G\341z\024\342?\366(\\\217\302\365\344?UUUUUU\325?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\017\017\017\017\017\357?n\333\266m\333\266\355?ffffff\342?H\341z\024\256G\341?\244p=\n\327\243\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\267\200\302\250N\343?{\024\256G\341z\224?\314\007\262\013\213\221\340?\000\000\000\000\000\000\360?\307\372\320X\037\032\343?\037\205\353Q\270\036\325?\303\365(\\\217\302\325?\n\324\372\225\002\265\336?\000\000\000\000\000\000\000\000\234\336\364\2467\275\341?\000\000\000\000\000\000\000\000\336\335\335\335\335\335\355?\nH\370\311\205\250\333?\032a\271\247\021\226\353?}\326\r\246\310g\355?,Q\273\022\265+\341?\270\036\205\353Q\270\356?{\024\256G\341z\224?+S\300| \273\340?\253\252\252\252\252\252\354?\236\347y\236\347y\336?\271S\264p\006\204\342?\016\232|\331\240\311\347?\277\032\023\351\201\312\351?{\024\256G\341z\334?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\364\005}A_\340?\303\365(\\\217\302\345?\000\000\000\000\000\000\340?\000\000\000\000\000\000\360?\033\312k(\257\241\354?\375J\201Z\277R\340?\024\256G\341z\024\336?]]]]]]\335?S\003{\307\324\300\356?\232\231\231\231\231\231\331?UUUUUU\345?)\\\217\302\365(\344?Q\334\n\305\255P\334?\177\372\351\247\237~\332?\211S\277\347\2268\345?`\243wE\346K\343?5\353\317\3407\321\323?\317d\264x\345\023\341?\253\252\252\252\252\252\355?\000\000\000\000\000\000\000\000\216\3438\216\3438\356?\036\036\036\036\036\036\356?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\222$I\222$I\342?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\244p=\n\327\243\340?\327\243p=\n\327\347?\000\000\000\000\000\000\341?\356\326y\0054\356\326?\000\000\000\000\000\000\000\000:\244&\030oe\357?\000\000\000\000\000\000\000\000ffffff\346?\270\036\205\353Q\270\346?\232\231\231\231\231\231\331?\240\263\035\037\202\224\333?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\301\321\023\034=\301\341?b\355\033\326\276a\355?\217\302\365(\\\217\352?\000\000\000\000\000\000\360?\204\3745;j\021\342?#\241\264\361\216j\326?\000\000\000\000\000\000\360?\216\3438\216\3438\356?\347}\212K\206`\355?\000\000\000\000\000\000\360?=\317\363<\317\363\354?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\037|\360\301\007\337?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\340\036\330\350]\221\351?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244p=\n\327\243\344?UUUUUU\345?\000\000\000\000\000\000\000\000\205\353Q\270\036\205\343?\n\327\243p=\n\357?L\207\032\354\316d\344?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\323\233\336\364\2467\355?\000\000\000\000\000\000\000\000\366g\360\233\350\351\334?\000\000\000\000\000\000\360?br\0051\271\202\330?<<<<<<\354?R\270\036\205\353Q\320?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\307q\034\307q\354?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\325?\000\000\000\000\000\000\360?\334\031\022\363v\206\344?\\\217\302\365(\\\357?\360r\n^N\301\333?\000\000\000\000\000\000\000\000n\333\266m\333\266\355?\036\036\036\036\036\036\356?_\2328\214\325\326\337?\256\354sHM0\356?\000\000\000\000\000\000\360?\270\036\205\353Q\270\356?\315\314\314\314\314\314\354?\000\000\000\000\000\000\356?\000\000\000\000\000\000\340?\354\304N\354\304N\354?\000\000\000\000\000\000\000\000g1\235\305t\026\343?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?}\037\253\331\223|\337?\000\000\000\000\000\000\000\000}g\243\276\263Q\357?\000\000\000\000\000\000\360?UUUUUU\345?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\243\213.\272\350\242\353?\000\000\000\000\000\000\360?\211y;Cb\336\356?\355\254vV;\253\355?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\350?\000\000\000\000\000\000\360?\244p=\n\327\243\320?\000\000\000\000\000\000\000\000J\375)\365\247\324\357?\000\000\000\000\000\000\360?\227\226\226\226\226\226\326?\323\233\336\364\2467\355?\326\326\337\036\330\350\335?\316\245C\rvg\342?\000\000\000\000\000\000\000\000\n\327\243p=\n\343?\000\000\000\000\000\000\360?\302\232%\306\247L\353?\000\000\000\000\000\000\000\000\366(\\\217\302\365\344?\037\205\353Q\270\036\335?\000\000\000\000\000\000\340?\211D\"\221H$\342?R@\302O.D\355?\025\315\023j\001c\342?UUUUUU\325?\321\007T\307\336\332\340?;\261\023;\261\023\353?\000\000\000\000\000\000\360?\021u3h\331\361\334?\000\000\000\000\000\000\360?\r\3455\224\327P\356?\000\000\000\000\000\000\340?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\232\231\231\231\231\231\331?\236\347y\236\347y\356?ffffff\356?\270\0076zWd\356?\037\205\353Q\270\036\335?\000\000\000\000\000\000\354?\327\243p=\n\327\333?\000\000\000\000\000\000\000\000\n\327\243p=\n\327?\000\000\000\000\000\000\360?\270\036\205\353Q\270\356?\000\000\000\000\000\000\000\000\036\036\036\036\036\036\356?\236\347y\236\347y\356?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=\n\327\243p=\346?\000\000\000\000\000\000\360?\270\036\205\353Q\270\336?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\244p=\n\327\243\354?*\362Y7\230\"\357?"
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\000\000\000\000\000\000&@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000G@\000\000\000\000\000\000\020@\000\000\000\000\000@U@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000@Y@\000\000\000\000\000\000\000@\000\000\000\000\000\000\360?\000\000\000\000\000\200E@\000\000\000\000\000\000\360?\000\000\000\000\000\200Y@\000\000\000\000\000\000\000@\000\000\000\000\000\000N@\000\000\000\000\000\200F@\000\000\000\000\000\000$@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\000K@\000\000\000\000\000\000$@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024@\000\000\000\000\000\000 @\000\000\000\000\000\300R@\000\000\000\000\000\200K@\000\000\000\000\000\000\360?\000\000\000\000\000\000\010@\000\000\000\000\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\0006@\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\200L@\000\000\000\000\000@T@\000\000\000\000\000\200D@\000\000\000\000\000\000\020@\000\000\000\000\000\000\360?\000\000\000\000\000\000*@\000\000\000\000\000\000\024@\000\000\000\000\000\000\024@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000S@\000\000\000\000\000\200M@\000\000\000\000\000\200H@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\300R@\000\000\000\000\000\000S@\000\000\000\000\000\000\360?\000\000\000\000\000\000P@\000\000\000\000\000\000\"@\000\000\000\000\000\000\034@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\000S@\000\000\000\000\000\200R@\000\000\000\000\000\300X@\000\000\000\000\000\200I@\000\000\000\000\000\200A@\000\000\000\000\000\000\000\000\000\000\000\000\000\200J@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\300Q@\000\000\000\000\000\200A@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\200L@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000O@\000\000\000\000\000\000 @\000\000\000\000\000\000V@\000\000\000\000\000\000\000@\000\000\000\000\000\000\360?\000\000\000\000\000@R@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000U@\000\000\000\000\000\000\024@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\010@\000\000\000\000\000\200b``h@\000\000\000\000\000\200M@\000\000\000\000\000\000\000\000\000\000\000\000\000\200N@\000\000\000\000\000\000Z@\000\000\000\000\000\000Y@\000\000\000\000\000@W@\000\000\000\000\000\000\000\000\000\000\000\000\000\200H@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000@\000\000\000\000\000\300X@\000\000\000\000\000\000 @\000\000\000\000\000\000\030@\000\000\000\000\000\0003@\000\000\000\000\000\000\360?\000\000\000\000\000`g`
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\030\364\005}A_\320?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?q=\n\327\243p\315?\021\021\021\021\021\021\301?333333\333?\030\206a\030\206a\270?UUUUUU\325?)\\\217\302\365(\340?\000\000\000\000\000\000\260?\034\307q\034\307q\254?B\032\244A\032\244\321?\024;\261\023;\261\263?R\270\036\205\353Q\340?\000\000\000\000\000\000\360?\220k\"\220k\"\340?\236\330\211\235\330\211\315?\267m\333\266m\333\346?\232\231\231\231\231\231\251?UUUUUU\345?(\257\241\274\206\362\232?H\341z\024\256G\321?[\204\3745;j\261?\000\000\000\000\000\000\000\000\267m\333\266m\333\326?\222$I\222$I\342?9\214\325\326\337\036\330?r\034\307q\034\307\321?\364\005}A_\320\227?\000\000\000\000\000\000\360?\025P\001\025P\001\325?\000\000\000\000\000\000\000\000\034\307q\034\307q\254?\000\000\000\000\000\000\000\000\036\036\036\036\036\036\276?UUUUUU\335?\020\004A\020\004A\240?\000\000\000\000\000\000\000\000\3234M\3234M\323?[\251\225Z\251\225\332?=\n\327\243p=\312?\360\370\303\001\217?\234?\000\000\000\000\000\000\360?\244p=\n\327\243\260?Lg1\235\305t\266?\232\231\231\231\231\231\231?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\300| \273\260\330?gH\314\333\031\022\323?\307\036f\001\371\"\321?\024;\261\023;\261\263?(\257\241\274\206\362\212?\000\000\000\000\000\000\300?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\330?R\270\036\205\353Q\330?\000\000\000\000\000\000\360?\3313\020\225\216\354\351?\000\000\000\000\000\000\340?]t\321E\027]\344?\000\000\000\000\000\000\000\000\n\327\243p=\n\327?\000\000\000\000\000\000\360?d!\013Y\310B\266?\000\000\000\000\000\000\360?R\270\036\205\353Q\330?\256G\341z\024\256\327?\256G\341z\024\256\337?\306\375\272\244\362a\334?ZZZZZZ\312?\000\000\000\000\000\000\000\000\225\024\220\360\223\013\321?{\024\256G\341zt?\000\000\000\000\000\000\000\000{\024\256G\341z\264?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\327tM\327tM\327?ffffff\306?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\323?\000\000\000\000\000\000\000\000\034\307q\034\307q\274?\000\000\000\000\000\000\000\000\020\215\365\241\261>\324?\006\026X`\201\005\266?)\\\217\302\365(\334?UUUUUU\325?\036\036\036\036\036\036\256?\032\374&z:\267\327?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\'\233l\262\311&\333?e\223M6\331d\303?\000\000\000\000\000\000\340?{\024\256G\341z\244?\000\000\000\000\000\000\000\000\333\266m\333\266m\273?\000\000\000\000\000\000\360?\256G\341z\024\256\347?\000\000\000\000\000\000\000\000e\264x\345\0231\333?Ava1\022J\333?\000\000\000\000\000\000\000\000\217\302\365(\\\217\332?\000\000\000\000\000\000\334?\n\327\243p=\n\267?\351\201\312\331-\374\352?UUUUUU\334?\000\000\000\000\000\000\000\000UUUUUU\325?)\\\217\302\365(\274?F\027]t\321E\227?R\270\036\205\353Q\340?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?^Cy\r\3455\304?\241\264\361\216j\326\317?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000q=\n\327\243p\335?\000\000\000\000\000\000\340?\270\036\205\353Q\270\342?\262\220\205,d!\323?\025\370\342\352\007\035\325?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\315\314\314\314\314\314\314?\"5\301x+\373\254?\000\000\000\000\000\000\000\000)\\\217\302\365(\324?\000\000\000\000\000\000\360?\000\000\000\000\000\000\260?UUUUUU\325?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\330?\201\371@va1\342?\205\353Q\270\036\205\323?g2Z\274\362\211\310?\000\000\000\000\000\000\300?\303\365(\\\217\302\265?\201L\212\027\310\244\330?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\021u3h\331\361\314?\373\225\002\265~\245\340?UUUUUU\325?333333\323?\241\344N\321\302\031\240?\027l\301\026l\301\246?UUUUUU\325?\222$I\222$I\262?\326\326\337\036\330\350\335?\000\000\000\000\000\000\000\000h/\241\275\204\366\262?\n\327\243p=\n\247?A\255_)P\353\327?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\027l\301\026l\301\246?UUUUUU\325?Y\037\032\353Cc\315?q=\n\327\243p\325?\271\353g\213\225\341\333?\036\036\036\036\036\036\256?\205\353Q\270\036\205\323?\256G\341z\024\256\327?\024;\261\023;\261\263?\000\000\000\000\000\000\000\000\320\272\301\024\371\254\233?\024\256G\341z\024\342?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\216\336\025\231/M\254?\030\206a\030\206a\250?\000\000\000\000\000\000\000\000\010\037|\360\301\007\317?\222$I\222$I\302?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\232\231\231\231\231\231\345?\000\000\000\000\000\000\360?\315\314\314\314\314\314\340?\000\000\000\000\000\000\260?h/\241\275\204\366\262?\000\000\000\000\000\000\360?\000\000\000\000\000\000\340?\000\000\000\000\000\000\360?(b6\227\0165\330?\000\000\000\000\000\000\350?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\030\253\255\277=\260\321?\232\231\231\231\231\231\311?\034\307q\034\307q\254?\021\021\021\021\021\021\261?)P\353W\n\324\332?Q^Cy\r\345\345?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000)\\\217\302\365(\324?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027l\301\026l\301\246?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000F\027]t\321E\267?\232\231\231\231\231\231\251?\356i\204\345\236F\330?\022#F\214\0301\342?\000\000\000\000\000\000\360?\327\243p=\n\327\303?{\024\256G\341z\244?\030z\241\027z\241\307?\000\000\000\000\000\000\340?\205\353Q\270\036\205\333?\000\000\000\000\000\000\000\000\021u3h\331\361\334?\000\000\000\000\000\000\000\000\303\365(\\\217\302\325?\257\310|i\3420\326?\000\000\000\000\000\000\000\0009\216\3438\216\343\350?\225\024\220\360\223\013\321?s\n^N\301\313\331?\000\000\000\000\000\000\342?\000\000\000\000\000\000\330?w\206\304\274\235!\321?[Ds\326\240x\332?{\024\256G\341z\324?333333\333?\000\000\000\000\000\000\260?\217\302\365(\\\217\322?\000\000\000\000\000\000\000\000\216\336\025\231/M\314?\000\000\000\000\000\000\360?)P\353W\n\324\332?\354Q\270\036\205\353\331?\304\210\021#F\214\330?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?UUUUUU\325?\000\000\000\000\000\000\000\000\364\307\034\245\333W\326?\000\000\000\000\000\000\000\000\241\001Kz\371\323\246?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?UUUUUU\325?)\\\217\302\365(\334?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\325?\353\017\364H\t9\325?\034L\221\317\272\301\264?\000\000\000\000\000\000\360?=\n\327\243p=\332?=\n\327\243p=\312?\000\000\000\000\000\000\326?\000\000\000\000\000\000\000\000\270\036\205\353Q\270\326?{\024\256G\341z\324?\354Q\270\036\205\353\261?\375\364\323O?\375\324?\232\231\231\231\231\231\321?\\\217\302\365(\\\327?\000\000\000\000\000\000\340?\222$I\222$I\242?\000\000\000\000\000\000\000\000F\027]t\321E\247?R\270\036\205\353Q\330?q=\n\327\243p\275?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\222\033\271\221\033\271\321?\236\330\211\235\330\211\255?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\224RJ)\245\264?\000\000\000\000\000\000\360?\000\000\000\000\000\000\340?\024\256G\341z\024\326?UUUUUU\305?`\243wE\346K\323?\267\304\251\337sK\314?\000\000\000\000\000\000\000\000\231\206\355fy\022\331?\301x+\373\034R\243?=\n\327\243p=\332?F\027]t\321E\307?\000\000\000\000\000\000\360?\310B\026\262\220\205\324?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\000\000\000\000\000\000\260?Cy\r\3455\224\327?\021\021\021\021\021\021\261?d!\013Y\310B\246?\373\373\274M\272\313\330?UUUUUU\315?\000\000\000\000\000\000\000\000\222$I\222$I\262?;\261\023;\261\023\333?\010\037|\360\301\007\277?\232\231\231\231\231\231\311?\025\250\365+\005j\335?\201\371@va1\322?\000\000\000\000\000\000\000\000\204\020B\010!\204\260?\253\252\252\252\252\252\252?\210E\312\300\323\255\351?\000\000\000\000\000\000\000\000Sc\017\263\200|\321?\000\000\000\000\000\000\000\0008\225\t\333 8\325?\000\000\000\000\000\000\000\000q=\n\327\243p\325?\037\205\353Q\270\036\325?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\036\036\036\036\036\236?\222$I\222$I\262?333333\333?333333\333?\327\243p=\n\327\323?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\220y)\021<\322?\270\036\205\353Q\270\356?\272\275\226\034\342*\323?\000\000\000\000\000\000\000\000\373\320X\037\032\353\323?\244p=\n\327\243\340?\000\000\000\000\000\000\340?\020>\370\340\203\017\336?\000\000\000\000\000\000\000\000\221\205,d!\013\321?\000\000\000\000\000\000\360?\021\021\021\021\021\021\261?_\2328\214\325\326\337?\226{\032a\271\247\301?\034L\221\317\272\301\264?\251]\211\332\225\250\335?{\024\256G\341z\244?\354Q\270\036\205\353\355?\352\334^K\016q\325?\253\252\252\252\252\252\272?\030\206a\030\206a\330?*Z8\003B\311\315?\2438\3271\212s\315?\004\225\263[\370\325\310?=\n\327\243p=\332?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?MYS\326\2245\325?{\024\256G\341z\324?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000(\257\241\274\206\362\272?N6\331d\223M\326?H\341z\024\256G\331?\030\030\030\030\030\030\330?\316\312O\210\263\362\243?\236\330\211\235\330\211\335?m\262\311&\233l\322?\341z\024\256G\341\322?\375Y\316\237\345\374\331?\327Zk\255\265\326\332?\2278\365{n\211\323?TI\001\t?\271\320?/,FBi\343\335?ko\254\376@\217\324?\000\000\000\000\000\000\260?\000\000\000\000\000\000\360?\034\307q\034\307q\254?\036\036\036\036\036\036\256?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\262>4\326\207\306\332?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\341z\024\256G\341\322?ffffff\306?UUUUUU\323?T\231\260\r\202S\331?\000\000\000\000\000\000\000\000\301x+\373\034R\223?\000\000\000\000\000\000\000\000333333\323?H\341z\024\256G\321?t\332@\247\rt\332?\010Rn*\232\'\324?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\301\321\023\034=\301\321?\362\224 O\t\362\264?\037\205\353Q\270\036\305?\000\000\000\000\000\000\000\000[\204\3745;j\321?/,FBi\343\335?\000\000\000\000\000\000\000\000\034\307q\034\307q\254?\311\020\254\243\315\373\264?\000\000\000\000\000\000\000\000\030\206a\030\206a\270?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?N6\331d\223M\326?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\243wE\346K\303?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\315\314\314\314\314\314\324?UUUUUU\325?\000\000\000\000\000\000\360?\n\327\243p=\n\327?{\024\256G\341z\204?i\361\312\'b6\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?d!\013Y\310B\266?\000\000\000\000\000\000\000\000z:\267\327\222C\334?\000\000\000\000\000\000\000\000G}g\243\276\263\341?\036\036\036\036\036\036\276?\315\314\314\314\314\314\344?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\034\307q\034\307q\274?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000UUUUUU\325?\000\000\000\000\000\000\000\000b\336\316\220\230\267\323?{\024\256G\341z\224?\020\215\365\241\261>\324?\000\000\000\000\000\000\000\000\222$I\222$I\262?\036\036\036\036\036\036\256?\274\"\363\245\211\303\330?\"5\301x+\373\254?\000\000\000\000\000\000\000\000\232\231\231\231\231\231\231?\232\231\231\231\231\231\271?\000\000\000\000\000\000\260?\000\000\000\000\000\000\340?\236\330\211\235\330\211\275?\000\000\000\000\000\000\360?:\213\351,\246\263\330?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\235W@\343n\235\327?\000\000\000\000\000\000\360?W\020\223+\210\311\225?\000\000\000\000\000\000\000\000UUUUUU\325?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?t\321E\027]t\301?\000\000\000\000\000\000\000\000ogH\314\333\031\242?\225\230JL%\246\262?\000\000\000\000\000\000\360?\000\000\000\000\000\000\320?\000\000\000\000\000\000\000\000\\\217\302\365(\\\343?\000\000\000\000\000\000\360?\300Z\001k\005\254u?\000\000\000\000\000\000\000\000\342\341\341\341\341\341\341?d!\013Y\310B\266?9\214\325\326\337\036\330?\343\225O\304l.\315?\000\000\000\000\000\000\360?{\024\256G\341z\324?\000\000\000\000\000\000\000\000\003^o\243?\024\302?\000\000\000\000\000\000\360?\327\243p=\n\327\323?\232\231\231\231\231\231\331?\000\000\000\000\000\000\340?\251T*\225J\245\322?`\243wE\346K\263?\010Rn*\232\'\324?UUUUUU\325?7Ls\027\374U\334?\024;\261\023;\261\303?\000\000\000\000\000\000\000\000\311|i\3420V\333?\000\000\000\000\000\000\000\000(\257\241\274\206\362\252?\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?H\341z\024\256G\331?\030\206a\030\206a\250?\232\231\231\231\231\231\251?\201\204\237\\\210\272\251?\270\036\205\353Q\270\316?\333\266m\333\266m\273?\303\365(\\\217\302\341?\000\000\000\000\000\000\360?H\341z\024\256G\341?\000\000\000\000\000\000\000\000{\024\256G\341z\244?\000\000\000\000\000\000\000\000\036\036\036\036\036\036\256?\030\206a\030\206a\230?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\024\256G\341z\024\316?\000\000\000\000\000\000\000\000ffffff\336?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\270\036\205\353Q\270\256?\320\272\301\024\371\254\233?"
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\223\256\033\351\305\277\312?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223v\344@\202\223\307?b\006\016\250q\017\276?d\323\273\302\356\370\321?(\235\2370\265\344\273?\271.\377\027\313\"\310?qkO\276\272\025\327?\021\021\021\021\021\021\261?\365\005\307S\354\213\263?\335\3078\\\214\016\322?\016\265b\244\034\275\266?\341\253\217Z\224\027\317?\254}\303\3327\254\315?\224\260J^\371\243\322?Upn\376E\244\323?\3413u\310\026\273\326?Y\026:\272\236\345\273?\370\272\367x\306\355\277?\2674@\322\315\204\243?\225\263\007\373\222\341\311?A\215\311\251\024\000\276?\000\000\000\000\000\000\000\000Xz\205\346n\265\327?C\326\r;\301g\320?\317Y\3239\016\210\322?#\373@\237\000\006\322?\340A\350\236\325\270\251?}\010\326?p\002\304?\031w\201D\001U\321?\000\000\000\000\000\000\000\000e\351\036<y%\260?\000\000\000\000\000\000\000\000Ip\231\221\256\302\266?\261\231u\224\347\325\324?\226\263m\310!q\277?\000\000\000\000\000\000\000\000\342\306\377\"\225\253\316?\3065\205k8\325\323?\363\306F9\330)\314?\271\376\305p\265`\261?\000\000\000\000\000\000\000\000(z\250[\r\251\262?+\203\365d\207u\271?\210\031\344\032\3340\257?\000\000\000\000\000\000\000\000\222$I\222$I\242?\351\"qS\001\342\320?m\347.?M\360\322?\211\037\3676\243\344\320?\016\265b\244\034\275\266?\342\236\303\215LV\227?\251Z\204i\374<\260?\000\000\000\000\000\000\000\000\226g\3647\254\357\322?\250\216\005\002\232}\316?\000\000\000\000\000\000\000\000qi\1779\2027\314?\032\035\275\006\321\313\317?\211\2260&.\203\322?\000\000\000\000\000\000\000\000R$\231T\300\221\271?\000\000\000\000\000\000\000\0000\034\331\203c\013\270?\362\224 O\t\362\264?\207\010l6\375B\317?\017I?\340\272[\322?\354K\306\351\253`\322?K\005\004\305\375\303\323?\375\371_\335\3533\310?\000\000\000\000\000\000\000\000\334\202\227G^\233\320?\311\227\246\332\270\262\203?\000\000\000\000\000\000\000\000\352\314\350\210}&\267?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\3147b\373\237P\316?\321\001z\034,F\317?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A0\017\r\373$\321?\000\000\000\000\000\000\000\000v\027\377oS\321\272?\000\000\000\000\000\000\000\000\024 tZ\007\007\325?\275\252\220\301R\267\277?\034_\303\033\206\266\312?B\310\367\360\271\202\270?\024\024\024\024\024\024\264?\360\310C\216u\330\321?\222$I\222$I\242?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000u\274\302\272)\234\323?q5\246\034\007d\263?\222$I\222$I\302?\352\027\374\243\263\007\270?\000\000\000\000\000\000\000\000@#p\331\224\346\301?\271.\377\027\313\"\250?\321\246c?\"\322\314?\222$I\222$I\242?p\035`l\320\324\322? [\335\246\356\301\321?\000\000\000\000\000\000\000\000\260\337\370\303-\300\322?\323\223\264\001\306?\322?\233\t\302\340\357\304\261?Y\010\2422\326\002\262?.R\016\343@\036\322?\000\000\000\000\000\000\000\000\320\371I\0018\021\323?%\237\r.\331\300\307?\352NjvVo\231?U\206JAE\272\322?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\321E\027]t\261?7\033\302\372\037 \305?\373I\213\001\3313\321?\340\367}\337\367}\277?\000\000\000\000\000\000\000\000C!\204\264\376Q\323?\222$I\222$I\322?\267\347\331i\205\372\320?\257\337cS\314\030\317?S\365\351\204\354`\324?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009}@\212\\]\321?\310&\241\325G\264\265?\000\000\000\000\000\000\000\000\013\242$\276%r\323?\010\037|\360\301\007\217?\332NO\261\336\373\276?2\360<\363\375\346\344?\000\000\000\000\000\000\000\000\004\0345\237\262\213\300?\223Y\260\251y+\324?\201\261C\315\352\007\320?\031~\375P?\201\312?\210-\255\3725u\270?X\236\323\226\261\255\300?\231\270\370\346\310V\323?\000\000\000\000\000\000\000\000\336\335\335\335\335\335\325?\032n\317\336a3\320?E\275\251\347\364;\323?XDH\276\"\334\271?\022s@B\\=\321?\205\200\037\207\304\007\261?$:\271\275\376\272\260?\t\355\343\302\003\361\324?|\201\237\225\010\372\265?\374c\221\267d\312\324?\222$I\222$I\242?\331\311\245\337\324x\262?}\343\360\247\360\340\300?\340`C\354\\]\322?\000\000\000\000\000\000\000\000ffffff\306?\213\2532+\374\333\300?*\342\023*\274\367\267?\226\001\"\347\013\324\306?\304\321\326\000\274\270\321?\177\212\320DZ\036\325?\205N\203\247\224\021\273?^E\362\360\225\325\322?:\351\233xi\202\321?\276wl\363\355\000\271?\000\000\000\000\000\000\000\000T\002\304\002}.\261?X\021\241\224Kk\322?\000\000\000\000\000\000\000\000=\233\341>\260]\321?\000\000\000\000\000\000\000\000Z[Y@\026(\301?\035\035\212<(,\262?\000\000\000\000\000\000\000\000\232\236\t\275h\251\320?\342\315X\207\220\352\261?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\260O\002\256\275\216\265?\352FAK\203\313\333?_&\250\345\035Q\320?\005#l\362\'\177\322?\2214\212\313\351\247\264?\332\311\245\337\324x\262?\000\000\000\000\000\000\000\000\334\266m\333\266m\273?\000\000\000\000\000\000\000\000\177\356a]\271g\321?h\352\246*W\363\321?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\205\242S\032\376\256\322?1hK+\322 \313?\360\210\252}\342Q\275?\362<\330\026\026\236\256?\212\365\034U\363\354\321?\335x/F8\360\323?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\256Q\027Y\365\323?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007cA:F\032\245?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\324\202\230L\365T\277?\222\271&|\024\231\262?\246\360\243_\022\340\320?^\000\234\277*\007\320?\000\000\000\000\000\000\000\000\377\271\206\261\305\017\314?\334\205\r\275Cs\264?\214h7z\3217\313?\000\000\000\000\000\000\320?$\302\344\010\002W\322?\000\000\000\000\000\000\000\000;U\371\235\345\305\307?\000\000\000\000\000\000\000\000\225\376x\274\030\364\313?\031\227|\326\034\315\320?\000\000\000\000\000\000\000\000\307$\334\005\023S\313?\364\344\022\341\"\353\314?!\325\010`\030i\321?E\225\013~\254\245\316?|\"\240\247M\235\326?\304/\\Q\\\312\321??\354\304\311\024\261\320?\305\346\342\267\311\207\325?\340L\r\223\364\367\323?\2214\212\313\351\247\264?\016\240\261\020_\034\314?\000\000\000\000\000\000\000\000\277\2378\204\256\013\321?\000\000\000\000\000\000\000\000\342\014\326\002\340V\323?KJ\r&\'\376\307?\317^O\245\212\'\324?\000\000\000\000\000\000\000\000\275cj`\357\230\272?\026\252\201\254>\205\322?\000\000\000\000\000\000\000\000\364-\n\272\245\017\324?\000\000\000\000\000\000\000\000\201U\322\275\177\212\260?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\271.\377\027\313\"\330?\244l\356\027l]\322?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\341H\377\264q\036\305?2\355\203V\177e\321?5t\363\030G\263\264?\000\000\000\000\000\000\000\000\312\"\255S\331Y\324?\004\020\307\223\261o\317?2\261=;D\247\323?\234\231\231\231\231\231\231?\232\025yB\000\226\322?\241f\027\014 9\317?\312\212U\324Z-\306?!\250|\255\314$\321?\0328\177,\317W\314?N\317,\375\276\032\321?ffffff\306?S\305\033.\372\253\257?\000\000\000\000\000\000\000\000R\006C\332[\306\261?\233,\231\027#\244\324?L\327=\336\273\250\303?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\370\355\353\025\202\323\322?\235U~Q\375\366\272?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\363\376\213\006\302\342\302?\000\000\000\000\000\000\000\000t\321E\027]t\261?\377t\'\"b\313\321?\362\333\243\331wC\304?\3632\224=\2069\323?\307\313M\221\363\326\317?\000\000\000\000\000\000\000\000|\rk\274{\373\323?\203n\035uV\331\252?\315_\235<\326\026\317?/`g\016\273\367\306?\000\000\000\000\000\000\000\0003\237\020\371`V\322?\000\000\000\000\000\000\000\000\031\333\202\344\r\307\321?\232\200<]lX\257?\246\244\014\036\214\324\314?\372\373\222-\005\213\251?\t\373\252{\361f\261?\003CQ\t\221\027\323?\252ZP\r\000U\315?\000\000\000\000\000\000\000\000|\201\237\225\010\372\265?- Q\2026\342\325?\275\234\2422\275s\245?\367\036Y@R\306\306?<#:\307C\243\322?*\201\n\036@\245\321?\000\000\000\000\000\000\000\000\221\223\247\307\177R\261?\264\300\357I\020]\273?\376\027\207\234\346\222\257?\222$I\222$I\242?\277R\220\021(B\323?\020\273Mt\255e\266?\225\276\2210\247n\316?\000\000\000\000\000\000\000\000*8\246\350\354x\313?>I\234i\342\370\324?:\330\332~l=\241?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000F\'\244\256\275\220\255?\035\2417p\206{\300?\"3\177\237\021B\264?#\025\335)\321^\322?.\0174z\267r\322?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\\\370Uq\365\321?\3548\277\367\225\300\304?\006\301\247\375MI\321?\000\000\000\000\000\000\000\000\206\225\027\245^j\325?P\031\237<>\t\326?N\337BE\013f\315?[\234|\377\344\010\321?\000\000\000\000\000\000\000\000\275\035\323]I\250\317?433333\263?\010\3647[]s\270?\306\315\303\260\231<\322?\005i\257\004\'%\273?\204\323\203\330\003\232\272?\021\354\325\2119\214\323?\364\214\375(\313\270\260?\222\310\024\264\223)\316?\303/\374(\352\365\322?,\321;\215\260H\263?\323G\266\377\304\277\322?\036\376\024\202H\024\320?y\'\355.\211\020\322?\"\341y\213\241|\306?\376&0\262?\301\322?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\355aP\036\302<\320?\01045\034\347\261\302?333333\303?\000\000\000\000\000\000\000\000h\203\333\215}\253\265?6n\305\022\301\332\320?>j\365}\026|\322?\224\364\3367\346\362\324?\"\202z\0252^\274?\262\234\036\016\377\316\321?\3015_\346J\206\317?\031[\226\306\021\206\313?\'/\326\365\2063\325?\3401\3642\035Q\324?q\346\354_X\220\321?\272\214Q\361\035A\321?\317\263\262\207\031|\322?U.\t|G\370\322?\265\244\032\302\013\334\276?\000\000\000\000\000\000\000\0000\252.\263\271J\267?\024\024\024\024\024\024\264?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000F\345\2749\246$\315?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\356T\325\236U\322?K\260\306\017\365q\305?p\337\0268\241G\324?b\212\205\006\231z\322?\000\000\000\000\000\000\000\000\3371\262\376|8\247?\000\000\000\000\000\000\000\000\017\277\361\275j\301\276?\256\262\341\341t\345\323?\353I:\320r\225\322?\365\314%#g\340\317?\222$I\222$I\242?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\272/\362;\253\022\321? \003\010\372\t;\303?\243.\214\213ZB\313?\000\000\000\000\000\000\000\000>\367i\315N\203\322?\213u\224\250\006~\326?\000\000\000\000\000\000\000\000\365\005\307S\354\213\263?\024\365\260\301\014\253\265?\000\000\000\000\000\000\000\000\025\010\366xF\270\264?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]\352uL\264\353\325?\222$I\222$I\242?\000\000\000\000\000\000\000\000V?\214\306\340\315\312?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\206\354\014\006\017\311?\250\354\232\2512X\310?\000\000\000\000\000\000\000\000\343R\305\370\000\375\315?\225\034\343#\366\370\275?\332\032\316e\253\327\320?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\364\367\323\017\342\263?\000\000\000\000\000\000\000\000\366\223\374\256j\374\323?\000\000\000\000\000\000\000\000\023\370;/\250\342\326?\221\221\221\221\221\221\301?\033\026\255\276#\245\316?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{t\377\0172\027\240?\000\000\000\000\000\000\000\000\275cj`\357\230\272?\000\000\000\000\000\000\000\000\"\014q\265i\024\277?\000\000\000\000\000\000\000\000\370\007\014\231\305+\320?U\350\350\350\275\335\255?\341\314\263\233\311\211\324?\000\000\000\000\000\000\000\000\026\021\206\234\324)\262?\024\024\024\024\024\024\264?^\313_\362o\231\321?\377\201\034\014\033\270\263?\000\000\000\000\000\000\000\0000\227\345\226\347\233\267?\231\231\231\231\231\231\271?\2214\212\313\351\247\264?\367\rk\337\260\366\315?\224^\321|N\375\277?\000\000\000\000\000\000\000\000d\376&\260\177\365\324?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\312\"A\262\253\322?\000\000\000\000\000\000\000\000\350\025\314\350\306\240\250?\000\000\000\000\000\000\000\000\374\322D\332\331X\275?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000}\211d\307\211\251\312?\000\000\000\000\000\000\000\000\332\244\331\241\252\211\266?^\217QI\253\207\274?\000\000\000\000\000\000\000\000#\n\255\206\225+\306?\000\000\000\000\000\000\000\000\016o\333D\377\330\322?\000\000\000\000\000\000\000\000:\214\2001.\000\252?\000\000\000\000\000\000\000\000f%\360\351\3659\323?\350\006~9\344b\261?\031N\373saW\320?\255@\321D\377M\322?\000\000\000\000\000\000\000\000\025\t\331\302\321\340\317?\000\000\000\000\000\000\000\000\n\3646\225\022M\276?\000\000\000\000\000\000\000\000@\267R([\257\320?l\255Q\370A\010\325?\000\000\000\000\000\000\320?!\267\\{\257-\316?T*\216\226\276|\277?\037=e0\234\365\320?}\21052}\301\305?>\345\357\242\013^\323?\201x\346\217.\206\271?\000\000\000\000\000\000\000\000\037fo\321\207:\321?\000\000\000\000\000\000\000\000\221\306\'\247\376\r\263?\232\231\231\231\231\231\271?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\002\223!/\275\316?\035\035\212<(,\262?Z\026:\272\236\345\273?\237\352\032\017\003f\243?+p(\271I\003\323?\004\314>3N\377\305?\003N9d\220\264\330?\000\000\000\000\000\000\000\000\245\222\272\213\321\214\322?\000\000\000\000\000\000\000\000\364\214\375(\313\270\260?\000\000\000\000\000\000\000\000\236\305\237\252D\315\270?\027\010\366xF\270\264?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\276\230\353]\330\311?\000\000\000\000\000\000\000\000\242[~\257\212\005\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\337\247K\346\357\017\267?\320\272\301\024\371\254\253?"
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "v]\327u]\327\265?$\025@R\001$5?\006N\037\321\024W4?`\241|\322\270v\262?\301\260\346\264l\352\203?o\254\376@\217\224\360?Z0\'%A\200|?\353[\203\256\240Y^?$=T\270\024\245\266?{\235#\267F\370\205?\255^7\026\333\233x?\222\321g\233\013&\251?\346)\203i\357\310q?\364\005}A_\320\267?0\360\266pJ\302D?\345\274\246\227w\263\242?r\0051\271\202\230\360?9\216\3438\216\343\210?C\330|t\331I{?\231\347D\020\322\237N?\006\275\024\363\205\326\231?\305\323\036W\001\301\360?$(\357\306\346\242\250?\035\217\354\250J\3514?\357U#\217\246Gr?m\224\310\307\035\326q?\341t\027v\274\036\304?UUUUUU\r@\330`\260\221IS\215?<GW\255c\036O?\244h\210?n]\316?\025\000\353\024\000\353D?R`\225\276n\271\210?<GW\255c\036O?6\361+a\326cw?F\027]t\321E\267?g\024\312\240\373f\244?\373\253\310]\275qP?G\366\014D\245#\363?\177\r \314d\217\304?\007\274aj\'\034\304?\353U\344L\330<\250?\277\365\014\002\227\3774?\305\330\345C-\036\264?8\006\203\326rl\223?\216\317c=i\264\260?\361h\343\210\265\3704?\341\217\246\335>\275D?\205\205\256,\235\343\311?\352Moz\323\233\316?ffffff\330?\361\306\253\261`\304q?\221\244\240\365n\177\232?I\')\303\344\270e?\342m\272\270\002\360m?>\370\340\203\017>\370?\032\266\233\345Id\332?L,\334\276C\3304?$\366\362\264{\037\231?\350\221\022r*\340w?\310\334!s\207\314m?\247$\270]\222\2234?4\321D\023M4\201?N\313\025\357{\3214?\234\033A\317`\\\177?f`Y4\316mD?&s\020p\353\263\351?\356\375\n\355P\334\257?\242\020\241\345\006I\324?9QyZ\350\216\335?N\032\365\177\037\362\254?\375\242\n\373=yD?\233\225\360(&%\311?\252\304Tb*1\345?\233L\335b\217\3634?\264\037\215\276?\013\201?\234\354\22057\0105?\217\224\3022\264\277\233?\000\000\000\000\000\200\363?\225\214#\316w\025\307?\221\372G\306\274\272U?\205O\010O\251\3334?t\321E\027]t\361?\002H\001\315 \200t?@U\226Y\243\200h?\032J7\006\"\3604?\222\330#\3102F\275?\000\313(\265<\337\235?\2418\377RN@\266?\313/\374\340%E`?\217\205\253\235\326Aw?#\274\010/\302\213\320?J\001v\255\177\242D?\200\331T\322\240|t?\325\241Sl\232\0225?Y\247X\247X\247\310?\r\274\303M\027\211\206?\247$\270]\222\223D?\\]*3\251A\221?\243\346>n\222\263y?\270t\233\242\366\021\203?\231\020\206N\265\244N?\020A\023p\215\013\260?\213\206\357E\177\254D?\374\001\177\300\037\360\367?\031:`\267\307Z\326?H\263g\256\031\3164?\253\252\252\252\252\252\032@\240\232\201j\006\252\231?\345\367c\204\364\342\260?%7Vb\200\340\246?\306\030c\2141\306\010@\231o\253\360\214\0315?\3455\224\327P^\013@\274@&\305\013d\342?\036\340\001\036\340\001\216?%I\222$I\222\374?&F9\013\204 5?\231o\253\360\214\0315?\351dm\327\204|D?C\325\211\223\205\341y?\352\211\356\032\305&\315?0\360\266pJ\302D?u\2232\024\303\0045?\362Y7\230\"\237\025@#\007\302\202\371\303D?\347@\242\0256\007\322?ffffff\002@\246\034\235~[i\346?\037n\210c\366\3314?\256\004\t\026=\262q?\231o\253\360\214\0315?3\376\231\021\237_\260?\376J\277\330]+\222?;^\271I\337\3244?\006\274\305;3\276\260?f`Y4\316mD?\316\366V\273\351\227u?g\177B@\364\260N?\037n\210c\366\3314?Z>\362`\221\326d?ih=D\037\253\257?\271\262<X\332\031\274?R\337\331\250\357l\020@\037\200`\037\200`\217?\242\364\267\0214\267\260?%I\222$I\222\020@z=]p\t\0035?f`Y4\316mD?\007\327\365<\222\222\260?\017\017\017\017\017\017\017@bo\370\025K\347N?Y\226eY\226e\t@\357\"\354\253\014:\253?e_S\252v\260\216?y<!\031\257Xg?y\207V\277@\"s?\213\3360N\260\263\322?#\007\302\202\371\303D?\213r\351H\306u\221?%I\222$I\222\034@%I\222$I\222\004@\031s\014IJ\0335?0\360\266pJ\302D?q\2620<\003\246\216?\016\356\341\013\263Gg?\224\373\000\216\247\023\330?\362Y7\230\"\237\025@5\003\325\014T3\240?.;\'E\230\233\206?/\272\350\242\213.\002@@\'#\032\3236\262?r6\216\350\374S\226?\037}\253y\254\0135?\203g\'\201\003M\211?\037\364A\037\364A\257?r\250\210\253\312\3174?L\373\326v\351 O?\205O\010O\251\3334?#,\3674\302r\033@\312\270\204\350\023\226|?g\320\262\3439\2254?\000\000\000\000\000\000\246??\306iRz+b?z=]p\t\0035?\035\217\354\250J\351D?<GW\255c\036O?\304\307\223\004\356X\260?<GW\255c\036O?o\254\376@\217\224\360?l&\201\244\031\317u?\r\331\244\026)\311\201?\205O\010O\251\3334?>\262\306xX\307D?y\374\303\266\025\2034?g\233 a\264\274\340?\035\325\376&\203\343m?\037n\210c\366\3314?H\263g\256\031\3164?\317\244\332\321\231T\353?\362\355\375\242p\220\260?\006\316\302\363czx?\027F\004\372\241\203\204?\232\254E\314\271 \312?_\345A\027\352\235\251?;^\271I\337\3244?\205O\010O\251\3334?\020F\207\325\231\270\260?H\263g\256\031\3164?r\250\210\253\312\3174?\036\323i\333\347$\223?\205O\010O\251\3334?\304\301\241\367h\3144?f\266:]q\022[?\335Qsd\300%5?\246Y4\367\367\304}?,\202\271\303;>{?\216\2769\372\346\350\233?h\220?\341\235$\247?%\323\363\031q\2014?\351\003\252com\330?\252l,\325\305\365\277?L\221\317\272\301\024\025@0\360\266pJ\302D?\230\335\234\245<(\275?\000r\345\314\252\2114?:\206A\341\355\026\261?\032J7\006\"\3604?\277\304\355\227\270\375\322?\221\036\250\234\335\302\367?z=]p\t\0035?RK\014\325\343hf?\214\006\332uTI\320?\301\026l\301\026l\021@C\213\017\031gMt?s\355\300\\;0\367?\325\313\005\252\320\350\347?\274\330\022|\233\277\362?\027\351\325\035\220\243\312?@A<K\036\245\260?\023q\266\033|\345u?\353b\365\232):\325?L,\334\276C\3304?\027]t\321E\027\342?;^\271I\337\3244?\250\353\323\365\351\372\324?\213\370\271|/\223\260?\262v\311\332%k\227?\025P\001\025P\0015?\036\235\006\315\323\245D?\000\000\000\000\000\000\032@Vw\306m\326P{?\000\000\000\000\000 \325?\031s\014IJ\0335?\242\353\254\372\302\211\252?\205O\010O\251\3334?\031s\014IJ\0335?%\326\306\006a\235N?`\353\n\315\355T\356?\324\243\224\320*\2564?,\305\255\341\317\0275?L,\334\276C\3304?w\260|}C\242N?y\217\367x\217\367\340?\367\300F\357\212\314\207?~K y-\3234?\005\'\036\335\252\217\315?C\323\035\354\267\332\330?\t\365\2569\237\202\236?0\360\266pJ\302D?______\017@%I\222$I\222\034@X\244\014<\335\232\277?#\263\253\'\300\322\254?\000\000\000\000\000\000$@\326\026\271\316\004\014\336?3R\217\244\233\300D?\257\205\214\034\206%\203?\010y\\\360\rG\177?\007\212\n\361\353\352}?\255\n\212/\013l\311?\253\252\252\252\252\252\n@\300\036\200\300\314\1774?r\250\210\253\312\3174?1\014\3030\014\303\370?\2658\337\363x\013\221?l&\201\244\031\317U?\032J7\006\"\3604?\037n\210c\366\3314?\001^H\265\365\030\244?H\263g\256\031\3164?f`Y4\316mD?\316\243Iv\370\375\314?<)o\251\004&\207?\211\210\210\210\210\210\032@\374\375~\277\337\357\307?z=]p\t\0035?\243\213.\272\350\242\021@\n\263w\376m\014\222?3%\306he\261\262?\375\333\030$\250\367}?+\335j4\261\2445?\341\326\336X\375\201\336?\037n\210c\366\3314?)&\350\256RL\340?\252YR\335\214\205\220?\357\224\350\251\301\233\231?c\177\030,\034\231s?\213B\326g\342y\177?\211\214\027\221\361\"\342?\306\030c\2141\306\010@\032J7\006\"\3604?\320@\2156)\'s?\\\220qA\306\005\231?\037\205\353Q\270\036\205?\016q\225)`>\360?n\232-\314\335\246\351?\257\210)\363\212\230\302?\031s\014IJ\0335?\267V\241\251qk\205?\256E\221\370g7\240?\021n N\231\210\252?#\007\302\202\371\303D?\325\206L\214V\311\313?x=_i\354F\225?\376\275u\004\245\331\344?\323!m\201\\\3354?\214d\025\316\311\323\261?\305\323\036W\001\301\260?bo\370\025K\347N?\277\365\014\002\227\3774?N\313\025\357{\3214?\023\311V\350\340;\227?r\336\332e\226\023s?S\372N\314\351\035\213?k\226\030\2372\355\274?\267m\333\266m\333\006@\025P\001\025P\0015?\025P\001\025P\0015?`\352P4\0337\337?\023\332Kh/\241\355?\360\003?\360\003?\010@\027h\201\026h\201\206?\204\035\267P\352\203\335?\243T\322\356\002\363\324?\354\370u\374:~\355?\234\212\346\t\265\200\361?r\250\210\253\312\3174?o\177\236}f\334\304?0\360\266pJ\302D?~@\222\217\r\354\202?\206\220\016\266c\336\333?\255\3704W\000\302\223?\244\341Y%\351=\231?8l\007x\243\252\213?\'}3:7\376\200?\247\254)k\312\232\362?\203\342i\217\253\200\360?\252YR\335\214\205\220?\363\303\024\245]\360\232?\313\226-[\266l\361?\326dt\265\177\315\242?Fc\234t9\307\226?\177\245@\255_)\360?\037n\210c\366\3314?\276\200\211\300\177\'5?9\273\205_\215\211\324?\005\'\036\335\252\217}?3R\217\244\233\300D?\266\263\373\217(1Q?\002Kz\371\323\026z?\221\010\023\234\314\215\347?\236\347y\236\347y\316?\347\255\377#wB\233?\360\240d5\305\372\231?\310\007\031x\321\333\224?\350\205^\350\205^\370?\274@&\305\013d\002@&\374\231\360g\302\277?\271\247\021\226{\032\001@\232\231\231\231\231\231\311?\006[\260\005[\260\341?\267R\022\325\201\310\331?\036W<\2632:\321?\321\327yL\336\033\237?\032J7\006\"\3604?D\236\203\212\233c\222?\324{\367\r\022*w?\277e^\204\225\3474?\3313\020\225\216\354i?\264u\211\343yh\240?r\250\210\253\312\3174?;^\271I\337\3244?\025\274\234\202\227S\020@\354\035S\003{\307\004@\243J;\205OR\306?\263\024\207\214\275v\351?r\250\210\253\312\3174?\305\236\375v\302\004\222?\2458\023o\323\3055?v\224\205\201\335\r{?3\232\235\202q\233\260?\230\341\034(T\021\230?\253\252\252\252\252*\016@>\262\306xX\307D?L,\334\276C\3304?;^\271I\337\3244?\253\315\230\236\356\017\274?E\226\246v\323\262\242?i}\'\204\250\214\263?\240\031KX\344<P?F5\314\016\216 \322?\352\305|\352\305|\372?J\340UB\356l[?x(\014\273x|x?16b\361(\333\224?J\316\371\016\201\0224?t\300n\217\265\014}?N\313\025\357{\3214?|Y\353zm\3724?\177`\253e\"\027\224?>\262\306xX\307D?r\250\210\253\312\3174? \214\264c\005\302\340?u\2232\024\303\0045?H\263g\256\031\3164?<\204\370\342xr\260?^\3753=\007\261g?\304\301\241\367h\3144?\004\204\024\367\265L\326?\026\343\272\245\177\241\321?Sf\241Rf\241\322?\241\324\220\244,_4?H\263g\256\031\3164?\240f\033f\215\265\177?\305\304\021\341\"\0175?\004\2721O\037\255\306?\372w\354\243\273\275P?\310\227\363\331\023p\243?r{*3\031(w?\277*-x\215!\260?;^\271I\337\3244?\231o\253\360\214\0315?\225R\t\221\236\302g?\025P\001\025P\0015?\\[\255\377(\251D?,\270=\263\361\t5?\276\365\3368@\005O?\031s\014IJ\0335?KKKKKK\307?\023\345XP\\\030\261?\020\t\274\375\220\300\353?\335Qsd\300%5?;\205\233!L4\203?\006\3536\326\3701w?N\230\337\325\342&\004@ \215\276?\013\021\222?\024;\261\023;\261\203?d\247\352X\277\266\276?\320\353\213$R\330k?\177\006|\327\275\341u?{\024\256G\341zt?D\375\'W\345\305\201?\373\331be\370F4?h/\241\275\204\366\242?\231o\253\360\214\0315?o\217\243\265C\217\210?\027!\177\315\216Z\364?#\007\302\202\371\3034?u\2536Z\366\321\217?\205\237B\013\\\221h?%\326\306\006a\235N?`\002\304*\310\001c?y\374\303\266\025\2034?N/\324\302\216\362}?\037\347E\346/\252e?c\372\256+U\033\260?G}g\243\276\263\251?\2458\023o\323\3055?>\262\306xX\307T?y\374\303\266\025\2034? ~\276E\234K\260?y\374\303\266\025\2034?\320+\312\305d\267\263?jU\020\277\252e4?\226\'\221i\330n\206?\360\007\374\001\177\300\217?\234\323\250\362\311\342\266?\341z\024\256G\341\016@L,\334\276C\3304?%I\222$I\222\034@!B\242\034\024\213x?\216\340?\016\213\375\254?L,\334\276C\3304?\307\343`+\232\277\260?|\032a\271\247\021\366?\267\232:\265\202\261D?u\307\262\tM=\267?\267\376\335\372w\353\277?i\376`\343\321\374\361?w\260|}C\242N?%S(M\240\310\245?G}g\243\276\263q?%e\317N-:K?\327\243p=\n\327\037@\246h\003j\307\271q?*G\251S\270\330y?0\360\266pJ\302D?\037\347E\346/\252u?H\263g\256\031\3164?\374\251\361\322Mb\200?y\374\303\266\025\2034?\355\331,\277`\325\261?\270rJ\010\367l|?\034q\363\363\035\'{?UUUUU\225\020@\3030\014\3030\014#@\227\200K\300%\340\222?<\237\0367c\177\310?\031s\014IJ\0335?%I\222$I\222\034@/\315\000\227\272\2044?\301\217\314\221X\010\201?~K y-\3234?_\007\316\031Q\332\233?\370\013*\304-+\213?4w\2621\247\227x?;^\271I\337\3244?\205O\010O\251\3334?\305\022K,\261\304\342?c\230\006\03617V?s\355\300\\;0\007@\331\t\0349wU4?\234\211\001\366\300\231h?\241\324\220\244,_4?`k\256|\254\315\260?\204,\252\210\200O\210?"
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "UUUUU\367\260@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\257\364\347l\307\215\242@\000\000\000\000\000\320R@\005j\375J\301?\326@\000\000\000\000\300\335\304@\000\000\000\000\000\260\214@\363\032\312k(]\321@\253\252\252\252\252f\232@\000\000\000\000\000\317\324@!V\224\306\307\273\307@\000\000\000\000\000\000\000\000\031\234\217\301\371\204\246@\000\000\000\000\000\000\000\000M0\336\312>\227k@Ei|d\202\245\316@\000\000\000\000\000q\254@\000\000\000\000`_\301@\000\000\000\000\000\000\000\00033333\240\240@\352\240\016\352\340M\321@\333\266m\333\366K\234@\000\000\000\000\000\000\000\000\351\242\213.\272e\271@\253\252\252\252\252j\\@\000\000\000\000`l\301@S\347\327\036r\\\267@\212\235\330\211\235\264\242@\000\000\000\000\000\000\000\000b\304\210\021\243C\300@\000\000\000\000\000\000\000\000\000\000\000\000\000Q\310@\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\261\023;\261\023\311\267@\000\000\000\000\000\206\241@\000\000\000\000\000\000\000\000f\203&_6L\307@\304Y\371\tq\376\265@\2541\221\036h\251\327@\307\n\204\221\366]\300@\000\000\000\000\000\000\000\000\2752\266\337Q\031\303@\331\211\235\330\311\342\326@b]z\314\337\213\217@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\214.\272\350\302\227\322@\224\325\362\306\010*\220@\341\345\024\274\234\314\307@\000\000\000\000\000\000\000\000~ylE\320L\260@\253\252\252\252\252\252&@\000\000\000\000\000j\307@\273\323\352N\253,\273@\000\000\000\000\000<\315@\000\000\000\000\000\000\000\000oz\323\233\336j\250@fffffD\256@33333\363H@\000\000\000\000\000\000\000\000\000\000\000\000\000\250V@\000\000\000\000\000\000\000\000\000\000\000\000\000\202\250@\000\000\000\000\000\000\000\000!\013Y\310B\231\253@\220\301\371\030\274\233\305@ZZZZJ.\321@\000\000\000\000\000\024\300@\350\013\372\202>\021\305@\000\000\000\000\000\000\000\000\224\327P^C5\270@\023\376L\3703\242\266@\000\000\000\000\000\000\000\000UUUU\025<\336@\000\000\000\000\000\000\000\000\3234M\3234\023\242@\340\007~\340\207\271\277@\354\304N\354\304S\246@\000\000\000\000\000l\264@\000\000\000\000\000\000\000\000\004n,\203\322\374\307@\000\000\000\000\200M\243@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\267m\333\266mE\306@I\222$I\322\023\313@\227\226\226\226\226\331\210@ffffff\036@\000\000\000\000\000\'\253@\232\231\231\231i\366\312@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\316\312O\210\263\322\271@\033\312k(\257\247\247@\000\000\000\000\000\000\000\000\000\000\000\000\200\341q@UUUU\325\233\262@\232\231\231\231\231\211m@\000\000\000\000\000\000\000\000ssss\363+\312@\000\000\000\000\000\000\000\000\354\304N\354D\376\262@SJ)\245\224\350\242@\000\000\000\000\000\000\000\000\3448\216\3438\021\261@?\202\373\010n\006\313@\333\225\250]\211\362\241@\n\324\372\225\002)\230@\217\302\365(\234\373\302@\000\000\000\000\000\000\000\000kq\023\3467\370\307@Y\310B\0262b\264@]t\321E\027\327\262@UUUU\225;\304@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200.\326@\312$\330U\370\342\206@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`L\342\340}\177\265@\000\000\000\000\000\000\000\000xxxx8\233\327@\315\314\314\314\214\231\266@J\374\214\022?\243\265@\000\000\000\000\000\000\000\000\000\000\000\000\0000m@\000\000\000\000\000\000\000\000\000\000\000\000\300*\312@vb\'v\342\200\314@\000\000\000\000\000\000\000\000\341\010\"\255\227t\300@\000\000\000\000\000\000\000\000\000\000\000\000\200\237\312@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200D@\223)\231\222)O\254@\223M6\331\344x\307@Z\263}\242z\262\271@\275\351Mozs\213@X\356i\204\345g\274@6\340\2125\340\266\260@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000F\266\363\375T\242\305@k\312\232\262\246\t\273@\000\000\000\000\000\000\000\000~\355!\227\025\312\251@\216\3438\216\3432\233@\315\314\314\314\314X\224@\000\000\000\000\000\300T@\000\000\000\000\000\000\000\000\0311b\304\210`\321@\000\000\000\000\000\000\000\000\000\000\000\000\000D\212@\260\303\022\216\352\371\252@\214.\272\350\"@\237@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\337\364\2467\275\034\261@\000\000\000\000\000\340s@W\324\025uE\353\261@\247\242yB-f\263@\224\327P^\203\233\307@\253\252\252\252\252\006\231@\234\336\364\2467\231\317@\304\303\303\303\303\223\277@\361\360\360\360\360\336\226@\000\000\000\000\000\000\000\000\315\314\314\314L\315\260@/\241\275\204v\325\250@\000\000\000\000\000\000\000\000\000\000\000\000\000\000A@\000\000\000\000\000\000\000\000\345\nbr\005\213\250@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000=\n\327\243p\355\201@\000\000\000\000\000\000&@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\372\202\276\240/\360\210@\000\000\000\000\000\000\000\000$\346\355\014\211\277\324@\000\000\000\000\000\000\000\000\000\000\000\000\240\331\302@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000yJ\220\247\204\261\331@\000\000\000\000\200M\260@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000q\303\r7\\\263\317@\243\335\303\3267\277\303@\000\000\000\000\000\000\000\000n\333\266m\333p\222@\233l\262\311\246\205\265@UUUUU\347\262@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\376\230\243t{z\306@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\347\234s\3169G|@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000333333`@\253\252\252\252\252\276\312@)\245\224RJ\232\307@\332\274Oq\311Q\304@\000\000\000\000\000\000\000\000\374v\251\'c\230\307@\000\000\000\000@\364\260@\3063\236\361\214X\255@\000\000\000\000\000\000\000\000z\236\347y\036(\311@\000\000\000\000\000\000\000\000\360\301\007\037|\254\245@\000\000\000\000\000\000\000\000\3448\216\343P\002\303@^\374\211\204S=\274@\000\000\000\000\000\000\000\000\000\000\000\000@\307\334@&\277X\362\013\003\301@{{{{\273\250\302@\000\000\000\000\000\374\317@\306\222_,\371\010\247@9A\270\033\373\247\260@\250\270d\010\3269\303@\036\036\036\036^\216\313@\025-\234\001\241Q\314@\000\000\000\000\000\300Y@\'vb\'6\035\275@\000\000\000\000\000\000\000\000!\013Y\310\202\205\267@\000\000\000\000\000\000\000\000~\004\367\021\\\204\310@\201\013\\\340\2027\276@\303\365(\\O\357\310@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\013Y\310\302:\251@33333\325\275@\305N\354\304\356K\311@\000\000\000\000\000\000\000\000d\002\275S\327\213\261@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\00028\037\203S\353\320@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\265\347d\372*\247\251@\000\000\000\000\000\340\214@\000\000\000\000\000\000\000\000=\317\363<O_\234@\341\203\017>\370\233\264@\315\314\314\314\314\343\324@\000\000\000\000\000\000\000\000\334WV\357\222\031\273@tK\234\372=\363\247@\205\366\022\332\353\363\314@ffff\346\205\306@\265\365\267\0076*u@\251\344\274,\3429\272@\000\000\000\000\000\000\000\000UUUUU\361\226@fffff\206o@\000\000\000\000\000\200@@J\374\214\022\277\317\263@\247h\341\014\010,\310@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]\327u]W,\310@\354\304N\354\304\340\251@\000\000\000\000@\267\306@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244p=\n\327\237\255@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008p\340\300\201\237\304@fffff\225\265@\013br\0051#\244@\312&\233l\262+\251@\000\000\000\000\000\000\000\000\204\370\016\342;<\256@\034\307q\034G\233\267@\330\023\366\204=\037\304@\000\000\000\000\000\360z@\000\000\000\000\000\000\000\000M\2324i\322\230\316@\000\000\000\000\000\000\000\000UUUU\261\352\310@\227\226\226\226\226\273\320@\000\000\000\000\000\233\275@\000\000\000\000\000\324\245@UUUUU]s@\000\000\000\000+4\330@\302l\027\302\354%\303@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000X\373\206\265\357q\315@n\333\266m\333\325\270@\301\333\017\t\274\251\305@\346\340f\277\0207\301@\004\007\016\0348\341\304@\000\000\000\000\000\000\000\000\000\000\000\000\000\354]@\224>\351\223>\361\264@NH\311\263\214x\221@\000\000\000\000\000\000\000\000\262\014J\205\211-\267@\037\205\353Q\270\027\255@33333\001\312@\000\000\000\000\000\000\000\000n\333\266m\3572\327@<\232?\330xh\277@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\027\220@F\027]t\321\225\231@\232\231\231\231\231\331U@&\322\003\225\263\256\310@\306M\230\337\325\200\261@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000_____,\314@\253\252\252\252\252N\231@\r\322 \r\022q\275@\236\330\211\235X\005\262@r\034\307q\334P\320@\316\201D+lV\307@\230\320^B\273\021\322@n\333\266m\303P\311@\000\000\000\000\000\000\000\0004O\250\005\214)\211@\000\000\000\000\000\000\000\00033333\233\241@5\'\201\270PC\263@\371\212\257\370\212\267\211@b\030\206a\030\222\276@n\333\266m;\025\315@\000\000\000\000\350\341\341@\024\024\024\024\024\034\275@\026\010#\355\030S\320@1\014\3030\014\277\222@\313=\215\260\334@\320@\212\235\330\211}\247\277@\t\355%\264\2277\304@3333\363\214\304@j\014\230\306\200!\203@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\347cp>\006(\301@UUUU5>\305@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\355\027bE\351\037\307@\320\272\301\024\371\205\272@\021\021\021\021\221N\316@2\221\036\250\234\345\222@\356\210;\342\216\336\315@\004\353h\363>\256\307@A\253/\025\264\270\301@dddd\344\177\302@\\\217\302\365(\031\321@\271d\010\326\321\326\201@];0\327\216\377\266@\303I\335\227G\376\315@\361\002\231\024/=\302@\350\205^\350\205\356\264@\000\000\000\000\000\000\000\000\'vb\'vN\272@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2000@\236\347y\236\347I\317@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\250\260\236\302\372\373\301@\021B\010!\204\223\263@_\361\025_\361o\254@\242\322\221=\203\213\321@\000\000\000\000\000\000\000\000\305N\354\304N\331\271@\000\000\000\000\000\000\000\000\307q\034\307q$\244@\315\314\314\314\034)\301@vb\'v\302\013\314@\330P^CY@\275@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005/\247\340\345\024\267@O\315\203\334\365\003\217@QQQQQ\360\240@\000\000\000\000\000\000\000\000\3703\341\317\204\255\267@\370S\343\245\233;\300@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\235s\3169\347\223\312@\000\000\000\000\000\000\000\000\000\000\000\000\000\300Q@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\350\013\372\202\276R\262@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\276\204\366\022\332\323\275@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\335\227\307\326\243\264@\000\000\000\000\000\344\224@\000\000\000\000\000\000\000\000wwwwW\231\265@0\351\324<\310\332\273@\003\003\003\003\003\004\272@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\352\225@\000\000\000\000\000\000\000\000t\321E\027\035\233\275@\000\000\000\000\000\000\000\000\000\000\000\000\300\354\262@\000\000\000\000 \"\357@3\360tk~\336\302@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200l@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\010#\355X1c@vb\'vb\007\202@\232\027\177\"\341\204\307@\000\000\000\000\000\000\000\000%I\222$I\262e@\000\000\000\000\000\000N@\345\027K~1\350\273@e\223M6\331Dj@\307q\034\307q\257\272@\243\032f\007Gw\265@\000\000\000\000\000T\224@\000\000\000\000\200\264\320@\000\000\000\000\000\200@@33333x\240@\000\000\000\000\000\000\000\000\342\244\356\313c\335\322@\000\000\000\000\000\000\000\000oz\323\233\336\222\250@N\002q\241f\270\306@\000\000\000\000\000\000\000\000\232\231\231\231Y\200\265@\000\000\000\000\240\320\320@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020f@\000\000\000\000\000\2007@\255F\021\207N\216\224@\253\252\252\252\332T\265@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016s\230\303\034\246\236@\000\000\000\000\000\000\000\000\315\314\314\314\334N\315@\000\000\000\000\000\000\000\000\232\231\231\231Y\357\300@\000\000\000\000\000a\235@ffff\306\222\260@\207N\332\007\311\362\270@\000\000\000\000\000\000\000\000\345\353\260\204\243\236\240@\000\000\000\000\340\327\334@k\255\265\326\032\307\277@\000\000\000\000\000\000\000\000\267m\333\266\355F\302@I\222$I\222C\312@\000\000\000\000\000\000\000\000\226\250]\211\332\023\266@\010!\204\020\302\335\263@\357\361\036\357\361B\317@\000\000\000\000\000\000\000\000\207\362\032\312\353]\320@\232\231\231\231\231\371j@\000\000\000\000\000\000\000\000\317d\264x\345+\223@\253\252\252\252\252\332\214@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUU]\251@\000\000\000\000\000\000\000\000\000\000\000\000\000@b@\000\000\000\000\000\000\000\000;\2142\025\017\224\321@UUUU\325\363\267@\000\000\000\000\200\272\325@\250\260\236\302z\036\273@\265~\245@\255c\200@{\t\355%\264\013\227@s\n^N\301\253F@\000\000\000\000\000\000\000\000\307\n\204\221v\327\240@\000\000\000\000\000\000\000\000\000\000\000\000\300(\264@\000\000\000\000\000\000\000\000d!\013Y\310m\262@\371\212\257\370\212O\220@\267m\333\266mA\232@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000>\006\347cp\002\274@\000\000\000\000\000\000\000\000\253\252\252\252\252/\266@\000\000\000\000\000\000\000\000\000\000\000\000\000\212\340@\000\000\000\000\000\000\000\000\277\263Q\337\331H\234@\000\000\000\000P \315@"
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_contentt\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\rr\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\rr\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tr\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\rt\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\370\001\000\000\000\000\000\000\036\014\000\000\000\000\000\000\226\014\000\000\000\000\000\000\342\013\000\000\000\000\000\000\022\014\000\000\000\000\000\000\336\013\000\000\000\000\000\000\312\013\000\000\000\000\000\000\250\014\000\000\000\000\000\000z\014\000\000\000\000\000\000\247\013\000\000\000\000\000\000\331\013\000\000\000\000\000\000h\014\000\000\000\000\000\000\262\013\000\000\000\000\000\000\330\r\000\000\000\000\000\000V\014\000\000\000\000\000\000\274\014\000\000\000\000\000\000.\010\000\000\000\000\000\000\200\004\000\000\000\000\000\000\272\013\000\000\000\000\000\000\212\014\000\000\000\000\000\000\304\013\000\000\000\000\000\000G\014\000\000\000\000\000\000\357\013\000\000\000\000\000\000?\014\000\000\000\000\000\000A\014\000\000\000\000\000\000\217\014\000\000\000\000\000\000\"\013\000\000\000\000\000\000\006\r\000\000\000\000\000\000\273\013\000\000\000\000\000\000W\014\000\000\000\000\000\000\262\013\000\000\000\000\000\000>\014\000\000\000\000\000\000\250\013\000\000\000\000\000\000W\014\000\000\000\000\000\000\241\013\000\000\000\000\000\000\020\002\000\000\000\000\000\000Z\014\000\000\000\000\000\000\257\013\000\000\000\000\000\000F\n\000\000\000\000\000\000\313\006\000\000\000\000\000\000y\006\000\000\000\000\000\000<\014\000\000\000\000\000\0002\014\000\000\000\000\000\000\311\013\000\000\000\000\000\000\036\014\000\000\000\000\000\0009\014\000\000\000\000\000\0006\014\000\000\000\000\000\000Y\014\000\000\000\000\000\0007\t\000\000\000\000\000\000\221\007\000\000\000\000\000\000G\005\000\000\000\000\000\000\301\013\000\000\000\000\000\000\363\013\000\000\000\000\000\000\024\014\000\000\000\000\000\000\311\013\000\000\000\000\000\000^\r\000\000\000\000\000\000\246\010\000\000\000\000\000\000x\014\000\000\000\000\000\000\224\014\000\000\000\000\000\000&\014\000\000\000\000\000\000\320\013\000\000\000\000\000\000qt\000\000\000\000\000\000\312\004\000\000\000\000\000\000\326\010\000\000\000\000\000\000F\014\000\000\000\000\000\000\302\013\000\000\000\000\000\000\265\013\000\000\000\000\000\000\301\013\000\000\000\000\000\000:\014\000\000\000\000\000\000\003\013\000\000\000\000\000\000\201\014\000\000\000\000\000\000X\017\000\000\000\000\000\000\317\013\000\000\000\000\000\000\262\013\000\000\000\000\000\000\033\n\000\000\000\000\000\000h\014\000\000\000\000\000\000\304\013\000\000\000\000\000\000(\014\000\000\000\000\000\000=\n\000\000\000\000\000\000\267\013\000\000\000\000\000\000q\014\000\000\000\000\000\000\227\013\000\000\000\000\000\000\324\013\000\000\000\000\000\000\302\013\000\000\000\000\000\000\211\014\000\000\000\000\000\000\225\014\000\000\000\000\000\000b\014\000\000\000\000\000\000\260\007\000\000\000\000\000\000j\005\000\000\000\000\000\000N\014\000\000\000\000\000\000L\013\000\000\000\000\000\000x\014\000\000\000\000\000\000\037\014\000\000\000\000\000\000\304\013\000\000\000\000\000\000\332\005\000\000\000\000\000\000#\014\000\000\000\000\000\000t\005\000\000\000\000\000\000\232\014\000\000\000\000\000\000\273\013\000\000\000\000\000\000\213\014\000\000\000\000\000\000 \014\000\000\000\000\000\000#\014\000\000\000\000\000\000\177\014\000\000\000\000\000\000\277\013\000\000\000\000\000\000\356\004\000\000\000\000\000\000U\014\000\000\000\000\000\000/\014\000\000\000\000\000\000\240\007\000\000\000\000\000\000T\014\000\000\000\000\000\000R\014\000\000\000\000\000\000\203\t\000\000\000\000\000\000\244\t\000\000\000\000\000\000G\014\000\000\000\000\000\000\301\013\000\000\000\000\000\000\"\014\000\000\000\000\000\000=\014\000\000\000\000\000\000\253\013\000\000\000\000\000\000J\014\000\000\000\000\000\000c\014\000\000\000\000\000\000\211\014\000\000\000\000\000\000\333\013\000\000\000\000\000\000\204\014\000\000\000\000\000\000G\014\000\000\000\000\000\000Q\014\000\000\000\000\000\000q\014\000\000\000\000\000\000\371\013\000\000\000\000\000\000\035\003\000\000\000\000\000\000=\014\000\000\000\000\000\000c\014\000\000\000\000\000\000\263\005\000\000\000\000\000\0000\014\000\000\000\000\000\000\211\014\000\000\000\000\000\000\032\014\000\000\000\000\000\000\220\014\000\000\000\000\000\000m\014\000\000\000\000\000\000I\n\000\000\000\000\000\000\256\013\000\000\000\000\000\000\277\013\000\000\000\000\000\000V\014\000\000\000\000\000\000\301\013\000\000\000\000\000\000\233\007\000\000\000\000\000\000U\014\000\000\000\000\000\000_\014\000\000\000\000\000\000!\r\000\000\000\000\000\000z\010\000\000\000\000\000\000\"\014\000\000\000\000\000\000V\014\000\000\000\000\000\000\277\013\000\000\000\000\000\000_\014\000\000\000\000\000\000\205\010\000\000\000\000\000\000\203\013\000\000\000\000\000\000x\014\000\000\000\000\000\000\037\014\000\000\000\000\000\000\273\010\000\000\000\000\000\000\022\014\000\000\000\000\000\000\247\013\000\000\000\000\000\000*\014\000\000\000\000\000\000\263\013\000\000\000\000\000\000\357\014\000\000\000\000\000\000M\014\000\000\000\000\000\000W\014\000\000\000\000\000\000F\014\000\000\000\000\000\000\336\t\000\000\000\000\000\000\001\014\000\000\000\000\000\000q\014\000\000\000\000\000\000\000\003\000\000\000\000\000\000U\014\000\000\000\000\000\000/\014\000\000\000\000\000\000>\014\000\000\000\000\000\000W\014\000\000\000\000\000\000V\014\000\000\000\000\000\000X\014\000\000\000\000\000\000\270\013\000\000\000\000\000\000\301\013\000\000\000\000\000\000%\014\000\000\000\000\000\000F\014\000\000\000\000\000\000R\014\000\000\000\000\000\000|\014\000\000\000\000\000\000\330\006\000\000\000\000\000\000\331\014\000\000\000\000\000\000G\014\000\000\000\000\000\000N\014\000\000\000\000\000\000\302\010\000\000\000\000\000\000\264\014\000\000\000\000\000\000\304\013\000\000\000\000\000\000\263\013\000\000\000\000\000\000\234\n\000\000\000\000\000\000\325\014\000\000\000\000\000\000J\014\000\000\000\000\000\000F\014\000\000\000\000\000\000\005\014\000\000\000\000\000\000N\014\000\000\000\000\000\000M\014\000\000\000\000\000\000g\t\000\000\000\000\000\000F\014\000\000\000\000\000\000Q\014\000\000\000\000\000\000\322\013\000\000\000\000\000\000\036\014\000\000\000\000\000\000\323\013\000\000\000\000\000\000\277\013\000\000\000\000\000\000x\014\000\000\000\000\000\000\236\014\000\000\000\000\000\000|\014\000\000\000\000\000\000\353\004\000\000\000\000\000\000\n\014\000\000\000\000\000\000,\005\000\000\000\000\000\000U\014\000\000\000\000\000\000\023\013\000\000\000\000\000\000x\014\000\000\000\000\000\000\332\014\000\000\000\000\000\000;\014\000\000\000\000\000\000\215\007\000\000\000\000\000\000\311\n\000\000\000\000\000\000/\014\000\000\000\000\000\000L\r\000\000\000\000\000\000\351\013\000\000\000\000\000\000\370\014\000\000\000\000\000\000\234\014\000\000\000\000\000\000{\010\000\000\000\000\000\0004\n\000\000\000\000\000\000\010\010\000\000\000\000\000\000x\007\000\000\000\000\000\000\004\014\000\000\000\000\000\000\033\014\000\000\000\000\000\000\326\010\000\000\000\000\000\000H\014\000\000\000\000\000\000\022\010\000\000\000\000\000\000J\014\000\000\000\000\000\000!\010\000\000\000\000\000\000\202\014\000\000\000\000\000\000x\014\000\000\000\000\000\0000\014\000\000\000\000\000\000f\014\000\000\000\000\000\000\371\005\000\000\000\000\000\000\267\013\000\000\000\000\000\000D\010\000\000\000\000\000\000\"\014\000\000\000\000\000\000\325\013\000\000\000\000\000\000F\014\000\000\000\000\000\000\"\014\000\000\000\000\000\000\213\014\000\000\000\000\000\000J\n\000\000\000\000\000\000a\014\000\000\000\000\000\000#\014\000\000\000\000\000\000H\014\000\000\000\000\000\000\212\014\000\000\000\000\000\000\351\016\000\000\000\000\000\000r\014\000\000\000\000\000\000K\014\000\000\000\000\000\000_\005\000\000\000\000\000\000\320\004\000\000\000\000\000\000u\004\000\000\000\000\000\000V\014\000\000\000\000\000\000\371\007\000\000\000\000\000\000\363\r\000\000\000\000\000\000s\014\000\000\000\000\000\000\367\014\000\000\000\000\000\000\336\r\000\000\000\000\000\000\276\010\000\000\000\000\000\000W\014\000\000\000\000\000\000\263\013\000\000\000\000\000\000\304\013\000\000\000\000\000\000\304\013\000\000\000\000\000\000\232\005\000\000\000\000\000\000O\014\000\000\000\000\000\000}\014\000\000\000\000\000\000M\014\000\000\000\000\000\000\347\010\000\000\000\000\000\0004\014\000\000\000\000\000\000\276\013\000\000\000\000\000\000;\014\000\000\000\000\000\000G\014\000\000\000\000\000\000W\014\000\000\000\000\000\000N\014\000\000\000\000\000\000\211\014\000\000\000\000\000\000g\014\000\000\000\000\000\000\227\014\000\000\000\000\000\000\211\013\000\000\000\000\000\000\362\010\000\000\000\000\000\0000\014\000\000\000\000\000\000\035\013\000\000\000\000\000\000\277\013\000\000\000\000\000\000\030\016\000\000\000\000\000\000\355\013\000\000\000\000\000\000\324\013\000\000\000\000\000\000\244\007\000\000\000\000\000\000G\014\000\000\000\000\000\000t\007\000\000\000\000\000\000\241\013\000\000\000\000\000\000\374\013\000\000\000\000\000\000?\014\000\000\000\000\000\000\337\014\000\000\000\000\000\000\024\n\000\000\000\000\000\0004\t\000\000\000\000\000\000;\014\000\000\000\000\000\000\262\013\000\000\000\000\000\000x\014\000\000\000\000\000\000\200\014\000\000\000\000\000\000\277\014\000\000\000\000\000\000\353\013\000\000\000\000\000\000\037\r\000\000\000\000\000\000\"\014\000\000\000\000\000\000\266\013\000\000\000\000\000\000\331\013\000\000\000\000\000\000o\014\000\000\000\000\000\000T\014\000\000\000\000\000\000\371\003\000\000\000\000\000\000\330\013\000\000\000\000\000\0003\007\000\000\000\000\000\000E\014\000\000\000\000\000\000\301\013\000\000\000\000\000\000\222\014\000\000\000\000\000\000m\014\000\000\000\000\000\0002\014\000\000\000\000\000\000L\014\000\000\000\000\000\000\265\013\000\000\000\000\000\000\276\013\000\000\000\000\000\000\315\013\000\000\000\000\000\000\325\014\000\000\000\000\000\000R\013\000\000\000\000\000\0000\014\000\000\000\000\000\0000\014\000\000\000\000\000\000\004\007\000\000\000\000\000\000\212\013\000\000\000\000\000\000%\t\000\000\000\000\000\000\301\013\000\000\000\000\000\000\351\t\000\000\000\000\000\000\233\014\000\000\000\000\000\000\353\017\000\000\000\000\000\000\244\014\000\000\000\000\000\000M\014\000\000\000\000\000\000I\005\000\000\000\000\000\000V\014\000\000\000\000\000\000\001\r\000\000\000\000\000\000@\007\000\000\000\000\000\000\276\013\000\000\000\000\000\000\272\013\000\000\000\000\000\000\337\013\000\000\000\000\000\000\305\013\000\000\000\000\000\000\336\013\000\000\000\000\000\000\264\n\000\000\000\000\000\000\237\013\000\000\000\000\000\000y\014\000\000\000\000\000\000\373\010\000\000\000\000\000\000\005\014\000\000\000\000\000\000\304\013\000\000\000\000\000\000Y\n\000\000\000\000\000\000G\014\000\000\000\000\000\000\034\014\000\000\000\000\000\000\233\006\000\000\000\000\000\000\210\r\000\000\000\000\000\000W\014\000\000\000\000\000\000r\007\000\000\000\000\000\000\247\013\000\000\000\000\000\000\021\006\000\000\000\000\000\000?\013\000\000\000\000\000\000y\014\000\000\000\000\000\0003\014\000\000\000\000\000\000w\014\000\000\000\000\000\000\216\006\000\000\000\000\000\0003\007\000\000\000\000\000\000\003\n\000\000\000\000\000\000:\t\000\000\000\000\000\000\247\004\000\000\000\000\000\000\007\013\000\000\000\000\000\000\223\004\000\000\000\000\000\000\364\t\000\000\000\000\000\000\\\014\000\000\000\000\000\000;\014\000\000\000\000\000\000\301\013\000\000\000\000\000\000\276\013\000\000\000\000\000\000?\014\000\000\000\000\000\000X\014\000\000\000\000\000\000\363\013\000\000\000\000\000\000M\014\000\000\000\000\000\000K\014\000\000\000\000\000\000\364\014\000\000\000\000\000\000\032\t\000\000\000\000\000\000\326\006\000\000\000\000\000\000-\006\000\000\000\000\000\000M\014\000\000\000\000\000\000\304\013\000\000\000\000\000\000\302\013\000\000\000\000\000\000\324\013\000\000\000\000\000\000\014\014\000\000\000\000\000\000w\014\000\000\000\000\000\000\310\010\000\000\000\000\000\000R\014\000\000\000\000\000\000x\014\000\000\000\000\000\000K\014\000\000\000\000\000\000i\007\000\000\000\000\000\000\304\013\000\000\000\000\000\000J\014\000\000\000\000\000\000\361\003\000\000\000\000\000\0000\010\000\000\000\000\000\000\002\t\000\000\000\000\000\000\253\013\000\000\000\000\000\000\303\013\000\000\000\000\000\000\263\013\000\000\000\000\000\000\302\014\000\000\000\000\000\000\221\013\000\000\000\000\000\000L\014\000\000\000\000\000\0006\014\000\000\000\000\000\000$\r\000\000\000\000\000\000R\014\000\000\000\000\000\000M\014\000\000\000\000\000\000\247\014\000\000\000\000\000\000/\014\000\000\000\000\000\000N\014\000\000\000\000\000\000\016\016\000\000\000\000\000\000R\014\000\000\000\000\000\000R\014\000\000\000\000\000\000\007\013\000\000\000\000\000\000\270\014\000\000\000\000\000\000-\t\000\000\000\000\000\000\221\014\000\000\000\000\000\000N\014\000\000\000\000\000\000\244\013\000\000\000\000\000\000*\014\000\000\000\000\000\000~\014\000\000\000\000\000\000\260\013\000\000\000\000\000\000\330\004\000\000\000\000\000\000\277\013\000\000\000\000\000\000\r\r\000\000\000\000\000\000K\014\000\000\000\000\000\000\"\014\000\000\000\000\000\000\037\014\000\000\000\000\000\0001\014\000\000\000\000\000\000d\014\000\000\000\000\000\000,\014\000\000\000\000\000\000at\000\000\000\000\000\000T\014\000\000\000\000\000\000\321\013\000\000\000\000\000\000\271\013\000\000\000\000\000\000\213\014\000\000\000\000\000\0008\014\000\000\000\000\000\000|\014\000\000\000\000\000\000\301\013\000\000\000\000\000\000\321\013\000\000\000\000\000\000{\014\000\000\000\000\000\000\301\013\000\000\000\000\000\000\302\013\000\000\000\000\000\000[\014\000\000\000\000\000\000|\014\000\000\000\000\000\000_\014\000\000\000\000\000\000|\014\000\000\000\000\000\000\274\t\000\000\000\000\000\000\216\014\000\000\000\000\000\000@\014\000\000\000\000\000\000\227\013\000\000\000\000\000\000>\014\000\000\000\000\000\000\351\010\000\000\000\000\000\000x\014\000\000\000\000\000\000+\013\000\000\000\000\000\000\274\013\000\000\000\000\000\0006\014\000\000\000\000\000\000H\014\000\000\000\000\000\000\004\014\000\000\000\000\000\000\200\017\000\000\000\000\000\000_\014\000\000\000\000\000\000}\005\000\000\000\000\000\000\177\014\000\000\000\000\000\000\242\006\000\000\000\000\000\000\212\014\000\000\000\000\000\000\007\014\000\000\000\000\000\000\300\013\000\000\000\000\000\000g\t\000\000\000\000\000\000D\013\000\000\000\000\000\000\275\013\000\000\000\000\000\000\\\014\000\000\000\000\000\000V\014\000\000\000\000\000\000\010\014\000\000\000\000\000\000N\014\000\000\000\000\000\000w\001\000\000\000\000\000\000}\014\000\000\000\000\000\000C\014\000\000\000\000\000\000\322\013\000\000\000\000\000\000\311\013\000\000\000\000\000\0008\n\000\000\000\000\000\000\233\005\000\000\000\000\000\000\343\013\000\000\000\000\000\000\177\n\000\000\000\000\000\000\"\014\000\000\000\000\000\000\304\014\000\000\000\000\000\000{\014\000\000\000\000\000\000\276\013\000\000\000\000\000\000K\014\000\000\000\000\000\0005\014\000\000\000\000\000\000^\014\000\000\000\000\000\000\266\013\000\000\000\000\000\000J\014\000\000\000\000\000\000F\014\000\000\000\000\000\000\201\010\000\000\000\000\000\000\206\013\000\000\000\000\000\000\225\004\000\000\000\000\000\000\227\014\000\000\000\000\000\000\271\013\000\000\000\000\000\000\221\014\000\000\000\000\000\000J\014\000\000\000\000\000\000-\014\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_contentf\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\'\000\000\000\000\000\000\000\nf\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000|t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000K\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000T\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~`\000\000\000\000\000\000\000;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000W\000\000\000\000\000\000\000nd\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\000\000\000\000\000\000\000s\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000i\000\000\000\000\000\000\000M\000\000\000\000\000\000\000;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\000\000\000&\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\'\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\236\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\000\000\000\000\000\000\000b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000@\000\000\000\000\000\000\000)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\227\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000znp\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\236\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\rr\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000k\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000l\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000wrf\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ke
      }
    }
  }
}
node {
  name: "Const_20"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_contentt\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_21"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_22"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\ni\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rsp<\000\000\000\000\000\000\000\000\000\000\000\000\000\000}w\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223$\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\316\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\214\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\362b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\3668\000\000\000\000\000\000}d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\021A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\316B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000$\007\000\000\000\000\000\000\031\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\322\003\000\000\000\000\000\000rtb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\215\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000k\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\3649\000\000\000\000\000\000\224\n\000\000\000\000\000\000hl\006\000\000\000\000\000\000G*\000\000\000\000\000\000\032\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\247\002\000\000\000\000\000\000\316L\000\000\000\000\000\000\n\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\334\211\000\000\000\000\000\000\r\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\001\000\000\000\000\000\000n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\274D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\003\000\000\000\000\000\000\205\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\376+\000\000\000\000\000\000\000\000\000\000\000\000\000\000x\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\025\000\000\000\000\000\000F\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000;\000\000\000\000\000\000\000N\010\000\000\000\000\000\000\236\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000f)\000\000\000\000\000\000\001\000\000\000\000\000\000\000pt\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000~r\000\000\000\000\000\000\263\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\026\000\000\000\000\000\000r!\000\000\000\000\000\000\357\002\000\000\000\000\000\000w\n\000\000\000\000\000\000\232\017\000\000\000\000\000\000\306\331\000\000\000\000\000\000D\033\000\000\000\000\000\000\201\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2514\000\000\000\000\000\000o%\000\000\000\000\000\000wm\tgbx\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_23"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "0\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\201\000\000\000\000\000\000\000\273\002\000\000\000\000\000\000\260\000\000\000\000\000\000\000#\014\000\000\000\000\000\000\371\000\000\000\000\000\000\0006\007\000\000\000\000\000\000\261\006\000\000\000\000\000\000\322\001\000\000\000\000\000\000N\000\000\000\000\000\000\000q\001\000\000\000\000\000\0004\000\000\000\000\000\000\000\202\017\000\000\000\000\000\000l\000\000\000\000\000\000\000\204\000\000\000\000\000\000\000J\001\000\000\000\000\000\000\003\000\000\000\000\000\000\000\247\002\000\000\000\000\000\000\226\000\000\000\000\000\000\000\333\001\000\000\000\000\000\000\021\336\000\000\000\000\000\000&\001\000\000\000\000\000\000\214\000\000\000\000\000\000\000\023\001\000\000\000\000\000\000\271\014\000\000\000\000\000\000\241\001\000\000\000\000\000\000\371\000\000\000\000\000\000\000\350\000\000\000\000\000\000\000k\000\000\000\000\000\000\000\225\000\000\000\000\000\000\000\234\000\000\000\000\000\000\000\275\004\000\000\000\000\000\000\202\000\000\000\000\000\000\000d\001\000\000\000\000\000\000\006\000\000\000\000\000\000\000\301\000\000\000\000\000\000\000U\000\000\000\000\000\000\000\261\002\000\000\000\000\000\000\267\000\000\000\000\000\000\000\004\000\000\000\000\000\000\0009\004\000\000\000\000\000\000\211\000\000\000\000\000\000\000O\001\000\000\000\000\000\000q\004\000\000\000\000\000\000t\002\000\000\000\000\000\000Q\000\000\000\000\000\000\000f\000\000\000\000\000\000\000=\001\000\000\000\000\000\000\313\006\000\000\000\000\000\000\006\003\000\000\000\000\000\000\230\000\000\000\000\000\000\000m\003\000\000\000\000\000\000C\000\000\000\000\000\000\000\301\000\000\000\000\000\000\000i\017\000\000\000\000\000\0001\001\000\000\000\000\000\000ni\000\000\000\000\000\000\000\322\000\000\000\000\000\000\000d\000\000\000\000\000\000\0001\002\000\000\000\000\000\000\334\000\000\000\000\000\000\000)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\215\000\000\000\000\000\000\000\304\000\000\000\000\000\000\000o\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000h\000\000\000\000\000\000\000L\000\000\000\000\000\000\000\305\000\000\000\000\000\000\000\274\002\000\000\000\000\000\000/\002\000\000\000\000\000\000Z\000\000\000\000\000\000\000f\001\000\000\000\000\000\000O\000\000\000\000\000\000\000\302\001\000\000\000\000\000\000{\000\000\000\000\000\000\000\201\000\000\000\000\000\000\000\232\001\000\000\000\000\000\000x\000\000\000\000\000\000\000qz\000\000\000\000\000\000\000\252\000\000\000\000\000\000\000w\000\000\000\000\000\000\000g\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000\237\002\000\000\000\000\000\000r\000\000\000\000\000\000\000\320\t\000\000\000\000\000\000\004\002\000\000\000\000\000\000\313\003\000\000\000\000\000\000\326\000\000\000\000\000\000\000~\000\000\000\000\000\000\000t\000\000\000\000\000\000\000\331\001\000\000\000\000\000\000\205\t\000\000\000\000\000\000r\000\000\000\000\000\000\000@\001\000\000\000\000\000\000n\000\000\000\000\000\000\000f\000\000\000\000\000\000\000z\000\000\000\000\000\000\000\253\000\000\000\000\000\000\000*\000\000\000\000\000\000\000N\001\000\000\000\000\000\000\032\001\000\000\000\000\000\000\244\003\000\000\000\000\000\000\n\001\000\000\000\000\000\000\271\005\000\000\000\000\000\000\365\001\000\000\000\000\000\000\244\000\000\000\000\000\000\000c\000\000\000\000\000\000\0006\002\000\000\000\000\000\000R1\000\000\000\000\000\000=\000\000\000\000\000\000\000#\004\000\000\000\000\000\000\264\000\000\000\000\000\000\000\005\001\000\000\000\000\000\000\222\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\272\001\000\000\000\000\000\000\223\000\000\000\000\000\000\000N\002\000\000\000\000\000\000\200\001\000\000\000\000\000\000\026\007\000\000\000\000\000\000\201\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000f\000\000\000\000\000\000\000%\000\000\000\000\000\000\000\035\001\000\000\000\000\000\000\031\003\000\000\000\000\000\000\240\001\000\000\000\000\000\000\330\000\000\000\000\000\000\000\206\002\000\000\000\000\000\000\316\004\000\000\000\000\000\000\314\003\000\000\000\000\000\000k\000\000\000\000\000\000\000B\001\000\000\000\000\000\0007\003\000\000\000\000\000\000l\000\000\000\000\000\000\000l\000\000\000\000\000\000\000e\000\000\000\000\000\000\000,\001\000\000\000\000\000\000\225\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000L\000\000\000\000\000\000\000\204\000\000\000\000\000\000\000\236\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\302\003\000\000\000\000\000\000\225\000\000\000\000\000\000\000\244\020\000\000\000\000\000\000\204\000\000\000\000\000\000\000\314\001\000\000\000\000\000\000\227\000\000\000\000\000\000\000@\000\000\000\000\000\000\000+\000\000\000\000\000\000\000\342\003\000\000\000\000\000\000P\000\000\000\000\000\000\000n\000\000\000\000\000\000\000g\000\000\000\000\000\000\000\224\001\000\000\000\000\000\000\250\002\000\000\000\000\000\000\257\000\000\000\000\000\000\000$\002\000\000\000\000\000\000\254\000\000\000\000\000\000\000p\000\000\000\000\000\000\000}\000\000\000\000\000\000\000V\000\000\000\000\000\000\000\032\001\000\000\000\000\000\000_\000\000\000\000\000\000\000\220\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000P\000\000\000\000\000\000\0007\000\000\000\000\000\000\000P\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\257\000\000\000\000\000\000\000\275\000\000\000\000\000\000\000t\001\000\000\000\000\000\000\360\001\000\000\000\000\000\000\037\000\000\000\000\000\000\000*0\000\000\000\000\000\000\376\004\000\000\000\000\000\0005\001\000\000\000\000\000\000m\000\000\000\000\000\000\000U\000\000\000\000\000\000\000/\000\000\000\000\000\000\000\377\004\000\000\000\000\000\000j\000\000\000\000\000\000\000X\000\000\000\000\000\000\000\304\001\000\000\000\000\000\000s\000\000\000\000\000\000\000b\004\000\000\000\000\000\000b\002\000\000\000\000\000\000\351\001\000\000\000\000\000\000\214\002\000\000\000\000\000\000\222\020\000\000\000\000\000\000H\002\000\000\000\000\000\000l\002\000\000\000\000\000\000A\001\000\000\000\000\000\000\276\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\244\004\000\000\000\000\000\000\274\000\000\000\000\000\000\000\264\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000B\000\000\000\000\000\000\000e\n\000\000\000\000\000\000\314\001\000\000\000\000\000\000\220\000\000\000\000\000\000\000*\000\000\000\000\000\000\000X\010\000\000\000\000\000\000a\000\000\000\000\000\000\000}\001\000\000\000\000\000\000~\000\000\000\000\000\000\000J\002\000\000\000\000\000\000]\000\000\000\000\000\000\000\223\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000&\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\264\000\000\000\000\000\000\000\311\000\000\000\000\000\000\0003\002\000\000\000\000\000\000~\000\000\000\000\000\000\000\254\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000,\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000{\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\201\202\000\000\000\000\000\000n\001\000\000\000\000\000\000z\000\000\000\000\000\000\000\\\004*\000\000\000\000\000*\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\263\000\000\000\000\000\000\000i\001\000\000\000\000\000\000\005\001\000\000\000\000\000\000\013\000\000\000\000\000\000\000#\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000+\002\000\000\000\000\000\000\335\000\000\000\000\000\000\0001\000\000\000\000\000\000\000^\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\025\001\000\000\000\000\000\000P\000\000\000\000\000\000\000*\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\213\002\000\000\000\000\000\000\006\001\000\000\000\000\000\000\332\002\000\000\000\000\000\000\250\000\000\000\000\000\000\000\361\004\000\000\000\000\000\000 \002\000\000\000\000\000\000D\n\000\000\000\000\000\000\215\000\000\000\000\000\000\000G\000\000\000\000\000\000\000~\003\000\000\000\000\000\000\252\000\000\000\000\000\000\000\371\001\000\000\000\000\000\000\363\n\000\000\000\000\000\000?\003\000\000\000\000\000\000L\000\000\000\000\000\000\000\260\001\000\000\000\000\000\000)\002\000\000\000\000\000\000\346\002\000\000\000\000\000\000i\000\000\000\000\000\000\000u\000\000\000\000\000\000\000G\002\000\000\000\000\000\000\'\000\000\000\000\000\000\000P\000\000\000\000\000\000\000\007\001\000\000\000\000\000\000N\000\000\000\000\000\000\000\227\000\000\000\000\000\000\000z\000\000\000\000\000\000\000q\001\000\000\000\000\000\000\272\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\263\000\000\000\000\000\000\000f\002\000\000\000\000\000\000t\002\000\000\000\000\000\000l\000\000\000\000\000\000\0001\"\000\000\000\000\000\000\212\001\000\000\000\000\000\000:\000\000\000\000\000\000\000\204\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000)\002\000\000\000\000\000\000\242\000\000\000\000\000\000\000r\001\000\000\000\000\000\000\306\000\000\000\000\000\000\000\301+\000\000\000\000\000\000Z\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\025\001\000\000\000\000\000\000\201\263\000\000\000\000\000\000\010\003\000\000\000\000\000\000\326\000\000\000\000\000\000\000\360\002\000\000\000\000\000\000k\000\000\000\000\000\000\000:\006\000\000\000\000\000\000\206\002\000\000\000\000\000\000\225\000\000\000\000\000\000\000\243\000\000\000\000\000\000\000\216\000\000\000\000\000\000\000\333\001\000\000\000\000\000\000\266\r\000\000\000\000\000\000\325\001\000\000\000\000\000\000\305\001\000\000\000\000\000\000\261\000\000\000\000\000\000\000\272\000\000\000\000\000\000\0007\002\000\000\000\000\000\000w\001\000\000\000\000\000\000q\000\000\000\000\000\000\000]\001\000\000\000\000\000\000\252\002\000\000\000\000\000\000`\001\000\000\000\000\000\000\212\001\000\000\000\000\000\000*\000\000\000\000\000\000\0000\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\315\002\000\000\000\000\000\000s\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000r\006\000\000\000\000\000\000\266\001\000\000\000\000\000\000\271\001\000\000\000\000\000\000a\001\000\000\000\000\000\000&\001\000\000\000\000\000\000\303\001\000\000\000\000\000\000\231\000\000\000\000\000\000\000\377\003\000\000\000\000\000\000\266\001\000\000\000\000\000\000L\003\000\000\000\000\000\000$\001\000\000\000\000\000\000+\002\000\000\000\000\000\0009\000\000\000\000\000\000\000z\001\000\000\000\000\000\000\232\002\000\000\000\000\000\000b\000\000\000\000\000\000\000\263\000\000\000\000\000\000\000gr\000\000\000\000\000\000\000+\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000\243\001\000\000\000\000\000\000/\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000i\004\000\000\000\000\000\000M\\\000\000\000\000\000\000\333\001\000\000\000\000\000\000\220\000\000\000\000\000\000\000\355\001\000\000\000\000\000\000\370\000\000\000\000\000\000\0005\000\000\000\000\000\000\000`\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\376\002\000\000\000\000\000\000E\000\000\000\000\000\000\000w\000\000\000\000\000\000\000\204\006\000\000\000\000\000\000z\000\000\000\000\000\000\000}\000\000\000\000\000\000\000X\004\000\000\000\000\000\000\317\005\000\000\000\000\000\0008\000\000\000\000\000\000\0005\000\000\000\000\000\000\000K\t\000\000\000\000\000\000\370\000\000\000\000\000\000\000t\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\n\002\000\000\000\000\000\000h\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\223\001\000\000\000\000\000\000F\001\000\000\000\000\000\000o\000\000\000\000\000\000\000\232\026\000\000\000\000\000\000/\000\000\000\000\000\000\000\223\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000h\000\000\000\000\000\000\000J\000\000\000\000\000\000\000i\000\000\000\000\000\000\000*\000\000\000\000\000\000\000z\000\000\000\000\000\000\000\354\000\000\000\000\000\000\000\036\002\000\000\000\000\000\000\337\001\000\000\000\000\000\000z\000\000\000\000\000\000\000\214\002\000\000\000\000\000\000i\000\000\000\000\000\000\000\332\002\000\000\000\000\000\000\232\000\000\000\000\000\000\000\271\000\000\000\000\000\000\000\002\002\000\000\000\000\000\000\251\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\211\000\000\000\000\000\000\000}\001\000\000\000\000\000\000\204\000\000\000\000\000\000\000k\000\000\000\000\000\000\000\333\001\000\000\000\000\000\0006\000\000\000\000\000\000\000\360\001\000\000\000\000\000\000m\000\000\000\000\000\000\000B\000\000\000\000\000\000\000\230\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\233\000\000\000\000\000\000\000\357\002\000\000\000\000\000\000Q\002\000\000\000\000\000\000~\004\000\000\000\000\000\000R\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000S\000\000\000\000\000\000\000\336\002\000\000\000\000\000\000$\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\352\001\000\000\000\000\000\000\267\001\000\000\000\000\000\000g\001\000\000\000\000\000\000L\004\000\000\000\000\000\000u\000\000\000\000\000\000\000x\002\000\000\000\000\000\000t\000\000\000\000\000\000\000\242\001\000\000\000\000\000\000^\000\000\000\000\000\000\0004\000\000\000\000\000\000\000>\n\000\000\000\000\000\000L\000\000\000\000\000\000\000\\\000\000\000\000\000\000\000\'\002\000\000\000\000\000\000\\\001\000\000\000\000\000\000\226\000\000\000\000\000\000\000\031\002\000\000\000\000\000\000\300\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\313\004\000\000\000\000\000\000\224\001\000\000\000\000\000\000\262\000\000\000\000\000\000\000h\000\000\000\000\000\000\000?\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000-\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000\n\001\000\000\000\000\000\000,\000\000\000\000\000\000\000\236\005\000\000\000\000\000\000B\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000DS\000\000\000\000\000\000\324\000\000\000\000\000\000\000T\t\000\000\000\000\000\0003\000\000\000\000\000\000\000m\000\000\000\000\000\000\000j\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\037\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\225\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\266\000\000\000\000\000\000\0006\001\000\000\000\000\000\000\203\004\000\000\000\000\000\000\256\000\000\000\000\000\000\000T\000\000\000\000\000\000\000p\000\000\000\000\000\000\000\312\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_24"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "u\000\000\000\000\000\000\000\341\001\000\000\000\000\000\000q\002\000\000\000\000\000\000\003\007\000\000\000\000\000\000%\004\000\000\000\000\000\000\r\004\000\000\000\000\000\000so\020\000\000\000\000\000\000\222\002\000\000\000\000\000\000\204\000\000\000\000\000\000\000W\004\000\000\000\000\000\000w\002\000\000\000\000\000\000\250\003\000\000\000\000\000\000B\002\000\000\000\000\000\000\307\006\000\000\000\000\000\000\357\004\000\000\000\000\000\000\024\005\000\000\000\000\000\000*\000\000\000\000\000\000\000@\003\000\000\000\000\000\000\006\002\000\000\000\000\000\000\276\002\000\000\000\000\000\000\356\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\204\006\000\000\000\000\000\000\270\001\000\000\000\000\000\000y\001\000\000\000\000\000\000\227\007\000\000\000\000\000\000\364\004\000\000\000\000\000\000@\001\000\000\000\000\000\000\\\002\000\000\000\000\000\000\302\000\000\000\000\000\000\000\363\003\000\000\000\000\000\000\342\000\000\000\000\000\000\000\242\003\000\000\000\000\000\000\360\005\000\000\000\000\000\000\350\001\000\000\000\000\000\000:\004\000\000\000\000\000\000f\010\000\000\000\000\000\000\201\003\000\000\000\000\000\000\260\004\000\000\000\000\000\000x\027\000\000\000\000\000\000\000\007\000\000\000\000\000\000\260\006\000\000\000\000\000\000z\001\000\000\000\000\000\000\311\001\000\000\000\000\000\000\343\001\000\000\000\000\000\000\241\002\000\000\000\000\000\000\342\005\000\000\000\000\000\000\307\n\000\000\000\000\000\000eo\002\000\000\000\000\000\000\030\007\000\000\000\000\000\000\224\006\000\000\000\000\000\000 \002\000\000\000\000\000\000\332\003\000\000\000\000\000\000j\001\000\000\000\000\000\000;\006\000\000\000\000\000\000C\002\000\000\000\000\000\000\201\000\000\000\000\000\000\000~\006\000\000\000\000\000\000>\004\000\000\000\000\000\000\274\004\000\000\000\000\000\000w\006\000\000\000\000\000\000\364\002\000\000\000\000\000\000\034\006\000\000\000\000\000\000\016\006\000\000\000\000\000\000(\001\000\000\000\000\000\000\315\037\000\000\000\000\000\000>\000\000\000\000\000\000\000\271\001\000\000\000\000\000\000\003\007\000\000\000\000\000\000\236\006\000\000\000\000\000\000\234\006\000\000\000\000\000\000\241\005\000\000\000\000\000\000C\001\000\000\000\000\000\000\036\002\000\000\000\000\000\000x\001\000\000\000\000\000\000\037\000\000\000\000\000\000\000\300\002\000\000\000\000\000\000\327\003\000\000\000\000\000\000\363\001\000\000\000\000\000\000\t\002\000\000\000\000\000\000\023\005\000\000\000\000\000\000\314\002\000\000\000\000\000\000\340\000\000\000\000\000\000\000\363\004\000\000\000\000\000\000\244\001\000\000\000\000\000\000z\003\000\000\000\000\000\000\371\001\000\000\000\000\000\000@\014\000\000\000\000\000\000\374\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000(\002\000\000\000\000\000\000\273\002\000\000\000\000\000\000\312\001\000\000\000\000\000\000\030\006\000\000\000\000\000\000.\016\000\000\000\000\000\000j\002\000\000\000\000\000\000s\002\000\000\000\000\000\000\310\003\000\000\000\000\000\000\230\002\000\000\000\000\000\000\264\003\000\000\000\000\000\000\t\002\000\000\000\000\000\000\r\001\000\000\000\000\000\000\223\003\000\000\000\000\000\000P\000\000\000\000\000\000\0009\001\000\000\000\000\000\000\303\003\000\000\000\000\000\000\017\n\000\000\000\000\000\000\n\002\000\000\000\000\000\000\320\001\000\000\000\000\000\000\314\003\000\000\000\000\000\000 \006\000\000\000\000\000\000r\002\000\000\000\000\000\000a\001\000\000\000\000\000\000\210\005\000\000\000\000\000\000\007\003\000\000\000\000\000\000\252\004\000\000\000\000\000\000\007\002\000\000\000\000\000\000w\003\000\000\000\000\000\000(\001\000\000\000\000\000\000\216\002\000\000\000\000\000\000;\006\000\000\000\000\000\000@\001\000\000\000\000\000\000\001\001\000\000\000\000\000\000\373\001\000\000\000\000\000\000Q\005\000\000\000\000\000\000d\002\000\000\000\000\000\000\371\000\000\000\000\000\000\000\007\001\000\000\000\000\000\0006\005\000\000\000\000\000\000j\006\000\000\000\000\000\000\352\002\000\000\000\000\000\000\330\000\000\000\000\000\000\000x\006\000\000\000\000\000\000\212\006\000\000\000\000\000\0009\002\000\000\000\000\000\000#\002\000\000\000\000\000\000\241\005\000\000\000\000\000\000w\002\000\000\000\000\000\000P\004\000\000\000\000\000\000\377\001\000\000\000\000\000\000\013\002\000\000\000\000\000\000\\\003\000\000\000\000\000\0003\001\000\000\000\000\000\000=\000\000\000\000\000\000\000#\001\000\000\000\000\000\000\234\001\000\000\000\000\000\000\217\002\000\000\000\000\000\000\332\004\000\000\000\000\000\000=\007\000\000\000\000\000\000d~\002\000\000\000\000\000\000\030\002\000\000\000\000\000\0009\006\000\000\000\000\000\000\n\002\000\000\000\000\000\000\360\001\000\000\000\000\000\000T\000\000\000\000\000\000\000\350\001\000\000\000\000\000\000mt\006\000\000\000\000\000\0005\007\000\000\000\000\000\000S\000\000\000\000\000\000\000\353\005\000\000\000\000\000\000R\020\000\000\000\000\000\000M\003\000\000\000\000\000\000\235\001\000\000\000\000\000\000\277\000\000\000\000\000\000\000\263\002\000\000\000\000\000\000L\002\000\000\000\000\000\000r\005\000\000\000\000\000\000\017\002\000\000\000\000\000\000\310\001\000\000\000\000\000\000\030\002\000\000\000\000\000\0009\000\000\000\000\000\000\000\261\014\000\000\000\000\000\0004\006\000\000\000\000\000\000\263\001\000\000\000\000\000\000\033\001\000\000\000\000\000\000\345\003\000\000\000\000\000\000\355\001\000\000\000\000\000\000^\001\000\000\000\000\000\000\345\001\000\000\000\000\000\000}\006\000\000\000\000\000\000on\007\000\000\000\000\000\000r\000\000\000\000\000\000\000\t\005\000\000\000\000\000\000\037\006\000\000\000\000\000\000\247\006\000\000\000\000\000\0000\004\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\025\001\000\000\000\000\000\000\331\001\000\000\000\000\000\000{\001\000\000\000\000\000\000T\002\000\000\000\000\000\000\255\002\000\000\000\000\000\000\013\002\000\000\000\000\000\000\022\002\000\000\000\000\000\000\354\002\000\000\000\000\000\000\316\001\000\000\000\000\000\000T\001\000\000\000\000\000\000J\000\000\000\000\000\000\000f\006\000\000\000\000\000\000T\001\000\000\000\000\000\000-\002\000\000\000\000\000\000\314\001\000\000\000\000\000\000_\003\000\000\000\000\000\000\271\006\000\000\000\000\000\000\241\014\000\000\000\000\000\000B\003\000\000\000\000\000\000\231\002\000\000\000\000\000\000\333\000\000\000\000\000\000\000\013\002\000\000\000\000\000\000\010\002\000\000\000\000\000\000\231\020\000\000\000\000\000\000\025\007\000\000\000\000\000\000^\000\000\000\000\000\000\000q\006\000\000\000\000\000\000y\001\000\000\000\000\000\000\224\000\000\000\000\000\000\000S\001\000\000\000\000\000\000u\002\000\000\000\000\000\000\313\006\000\000\000\000\000\000 \000\000\000\000\000\000\000\277\000\000\000\000\000\000\000\261\003\000\000\000\000\000\000|\000\000\000\000\000\000\000\\\002\000\000\000\000\000\000\362\001\000\000\000\000\000\000\254\006\000\000\000\000\000\000\202\006\000\000\000\000\000\000M\002\000\000\000\000\000\000^\000\000\000\000\000\000\000p\006\000\000\000\000\000\000\310\000\000\000\000\000\000\000\275\001\000\000\000\000\000\000R$\000\000\000\000\000\000\251\004\000\000\000\000\000\000\'\001\000\000\000\000\000\000\246\001\000\000\000\000\000\000\375\001\000\000\000\000\000\000z\006\000\000\000\000\000\000\037\002\000\000\000\000\000\000|\006\000\000\000\000\000\000\204\001\000\000\000\000\000\000E\002\000\000\000\000\000\000\246\001\000\000\000\000\000\000\325\001\000\000\000\000\000\000\355\000\000\000\000\000\000\000i\247\000\000\000\000\000\000\336\001\000\000\000\000\000\000\340\002\000\000\000\000\000\000W\002\000\000\000\000\000\000\251\000\000\000\000\000\000\000\221\002\000\000\000\000\000\000m\001\000\000\000\000\000\000\344\001\000\000\000\000\000\000\240\000\000\000\000\000\000\000\016\005\000\000\000\000\000\000\320\005\000\000\000\000\000\000H\000\000\000\000\000\000\000I\006\000\000\000\000\000\000\236\006\000\000\000\000\000\000@\002\000\000\000\000\000\000\334\003\000\000\000\000\000\000\340\000\000\000\000\000\000\000C\001\000\000\000\000\000\000\263\002\000\000\000\000\000\000\260\006\000\000\000\000\000\000\236\001\000\000\000\000\000\000p\004\000\000\000\000\000\000\003\006\000\000\000\000\000\000\344\000\000\000\000\000\000\000\316\000\000\000\000\000\000\000\024\002\000\000\000\000\000\000\'\000\000\000\000\000\000\000\364\005\000\000\000\000\000\000\336\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\006\000\000\000\000\000\000\242\000\000\000\000\000\000\000\346\002\000\000\000\000\000\000D\005\000\000\000\000\000\000\317\003\000\000\000\000\000\000\311\006\000\000\000\000\000\000v\000\000\000\000\000\000\000Q\t\000\000\000\000\000\000&\002\000\000\000\000\000\000\231\000\000\000\000\000\000\000\323\002\000\000\000\000\000\0001\001\000\000\000\000\000\000\240\000\000\000\000\000\000\000\027\001\000\000\000\000\000\000\353\006\000\000\000\000\000\000\325\001\000\000\000\000\000\000\251\006\000\000\000\000\000\000\244\002\000\000\000\000\000\000\021\002\000\000\000\000\000\000f\001\000\000\000\000\000\000\010\005\000\000\000\000\000\000\022\002\000\000\000\000\000\000\314\000\000\000\000\000\000\000\353\001\000\000\000\000\000\000;\004\000\000\000\000\000\000\213\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\022\002\000\000\000\000\000\000\267\006\000\000\000\000\000\000\271\002\000\000\000\000\000\000\270\006\000\000\000\000\000\000r\002\000\000\000\000\000\000\200\006\000\000\000\000\000\000\350\005\000\000\000\000\000\000u\001\000\000\000\000\000\000 \005\000\000\000\000\000\000\306\000\000\000\000\000\000\000\324\000\000\000\000\000\000\000~\004\000\000\000\000\000\000i\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\000\000\000\000\000\000\000k\032\000\000\000\000\000\0005\006\000\000\000\000\000\000\235\003\000\000\000\000\000\000l\006\000\000\000\000\000\000\274\003\000\000\000\000\000\0009\001\000\000\000\000\000\000j\002\000\000\000\000\000\000L\001\000\000\000\000\000\000G\004\000\000\000\000\000\000\350\001\000\000\000\000\000\000\304\001\000\000\000\000\000\000\034\003\000\000\000\000\000\000\263\001\000\000\000\000\000\000\264\002\000\000\000\000\000\000\217\006\000\000\000\000\000\000\300\006\000\000\000\000\000\000\250\002\000\000\000\000\000\000k\000\000\000\000\000\000\0000\010\000\000\000\000\000\000\243\000\000\000\000\000\000\000\r\002\000\000\000\000\000\000\302\001\000\000\000\000\000\000\014\005\000\000\000\000\000\000\031\002\000\000\000\000\000\000\'\000\000\000\000\000\000\000\032\006\000\000\000\000\000\000\366\001\000\000\000\000\000\000\353\002\000\000\000\000\000\000|e\006\000\000\000\000\000\000\200\002\000\000\000\000\000\000r\002\000\000\000\000\000\000\013\002\000\000\000\000\000\000\363\000\000\000\000\000\000\000\233\003\000\000\000\000\000\000\276\006\000\000\000\000\000\000i\006\000\000\000\000\000\000\n\010\000\000\000\000\000\000\261\002\000\000\000\000\000\000~\000\000\000\000\000\000\000\226\002\000\000\000\000\000\000\331\003\000\000\000\000\000\000\010\001\000\000\000\000\000\000S\000\000\000\000\000\000\000\010\002\000\000\000\000\000\000\353\006\000\000\000\000\000\000h\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\306\003\000\000\000\000\000\000\301\004\000\000\000\000\000\000K\001\000\000\000\000\000\000}\002\000\000\000\000\000\000\237\005\000\000\000\000\000\000\003\002\000\000\000\000\000\000M\000\000\000\000\000\000\000I\006\000\000\000\000\000\000R\001\000\000\000\000\000\000\030\001\000\000\000\000\000\000\223\000\000\000\000\000\000\000\033\001\000\000\000\000\000\000\245\005\000\000\000\000\000\000#\006\000\000\000\000\000\000\254\003\000\000\000\000\000\000&\000\000\000\000\000\000\000\265\001\000\000\000\000\000\000fw\002\000\000\000\000\000\000\205\002\000\000\000\000\000\000\315\003\000\000\000\000\000\000|\006\000\000\000\000\000\000\303\001\000\000\000\000\000\000\355\001\000\000\000\000\000\000y\002\000\000\000\000\000\000^\000\000\000\000\000\000\000-\004\000\000\000\000\000\000\255\010\000\000\000\000\000\000~\002\000\000\000\000\000\000^\002\000\000\000\000\000\000Z\002\000\000\000\000\000\000\013\002\000\000\000\000\000\000\263\002\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_25"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000V\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000X\001\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000c\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tu\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000yttr\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000+\000\000\000\000\000\000\000*\000\000\000\000\000\000\000\ti\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\016\005\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\016\026\000\000\000\000\000\000\trnnr\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\trtn
      }
    }
  }
}
node {
  name: "Const_26"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 537
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_10"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_11"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_12"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_13"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/Blanguage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_14"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_15"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/Bprotected_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/ExpandDims"
  op: "ExpandDims"
  input: "Const_16"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Cast_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Where"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1/stack"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/unstack"
  op: "Unpack"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/stack"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/unstack:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Mul"
  op: "Mul"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/stack"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Mul"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Add"
  op: "Add"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Gather"
  op: "Gather"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Gather"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/num_buckets/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/num_buckets"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/num_buckets/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/zero/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/zero"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/zero/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Less"
  op: "Less"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/num_buckets"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Less"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/All"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/num_buckets"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/num_buckets"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/zero"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/All"
  op: "All"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/GreaterEqual"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/All"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Identity"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/values"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
  input: "^dnn/input_from_feature_columns/input_layer/Bverified_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Where"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/to_sparse_input/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Identity"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/on_value"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/ExpandDims"
  op: "ExpandDims"
  input: "Const_17"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/Shape"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/accountNameLength/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/ExpandDims"
  op: "ExpandDims"
  input: "Const_18"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/Shape"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ageDays/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/ExpandDims"
  op: "ExpandDims"
  input: "Const"
  input: "dnn/input_from_feature_columns/input_layer/average/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/average/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/average/Shape"
  input: "dnn/input_from_feature_columns/input_layer/average/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/average/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/average/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/average/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/average/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/average/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/average/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/ExpandDims"
  op: "ExpandDims"
  input: "Const_19"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/Shape"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/descriptionLength/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/ExpandDims"
  op: "ExpandDims"
  input: "Const_22"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/Shape"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/favoritesCount/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/ExpandDims"
  op: "ExpandDims"
  input: "Const_23"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/Shape"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/followersCount/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/ExpandDims"
  op: "ExpandDims"
  input: "Const_24"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/Shape"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/friendsCount/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/ExpandDims"
  op: "ExpandDims"
  input: "Const_25"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/Shape"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/listedCount/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/ExpandDims"
  op: "ExpandDims"
  input: "Const_1"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/Shape"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativeNum/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/ExpandDims"
  op: "ExpandDims"
  input: "Const_2"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/Shape"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/negativePol/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/ExpandDims"
  op: "ExpandDims"
  input: "Const_3"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/Shape"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralNum/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/ExpandDims"
  op: "ExpandDims"
  input: "Const_4"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/Shape"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/neutralPol/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/ExpandDims"
  op: "ExpandDims"
  input: "Const_5"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/Shape"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positiveNum/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/ExpandDims"
  op: "ExpandDims"
  input: "Const_6"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/Shape"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/positivePol/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/ExpandDims"
  op: "ExpandDims"
  input: "Const_20"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Shape"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/ExpandDims"
  op: "ExpandDims"
  input: "Const_21"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/Shape"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/screenNameLength/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/ExpandDims"
  op: "ExpandDims"
  input: "Const_7"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/Shape"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/standardDeviation/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/ExpandDims"
  op: "ExpandDims"
  input: "Const_8"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/ExpandDims"
  op: "ExpandDims"
  input: "Const_9"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Shape"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Reshape/shape/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultImage_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BdefaultProfile_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BgeoEnabled_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Blanguage_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BprofileBackgroundImage_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bprotected_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Bverified_indicator/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/accountNameLength/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/ageDays/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/average/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/descriptionLength/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/favoritesCount/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/followersCount/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/friendsCount/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/listedCount/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/negativeNum/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/negativePol/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/neutralNum/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/neutralPol/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/positiveNum/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/positivePol/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/screenNameDigits/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/screenNameLength/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/standardDeviation/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerDay/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/tweetsPerMSecPerDay/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 26
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "!\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3735436797142029
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3735436797142029
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 33
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6324555277824402
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6324555277824402
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/zero"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_2/Cast"
  input: "dnn/zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank/rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank/assert_type/statically_determined_correct_type"
  op: "NoOp"
  input: "^add"
}
node {
  name: "dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  op: "NoOp"
  input: "^add"
}
node {
  name: "dnn/head/predictions/logits/strided_slice/stack"
  op: "Const"
  input: "^add"
  input: "^dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  input: "^dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  input: "^dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/predictions/logits/Shape"
  input: "dnn/head/predictions/logits/strided_slice/stack"
  input: "dnn/head/predictions/logits/strided_slice/stack_1"
  input: "dnn/head/predictions/logits/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_equal/x"
  op: "Const"
  input: "^add"
  input: "^dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/predictions/logits/assert_equal/x"
  input: "dnn/head/predictions/logits/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_equal/Const"
  op: "Const"
  input: "^add"
  input: "^dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_equal/All"
  op: "All"
  input: "dnn/head/predictions/logits/assert_equal/Equal"
  input: "dnn/head/predictions/logits/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/predictions/logits/assert_equal/All"
  input: "dnn/head/predictions/logits/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/predictions/logits"
  op: "Identity"
  input: "dnn/logits/BiasAdd"
  input: "^dnn/head/predictions/logits/assert_rank/static_checks_determined_all_ok"
  input: "^dnn/head/predictions/logits/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/head/predictions/logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/head/predictions/logits"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ArgMax/dimension"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ArgMax"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/classes/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/predictions/classes"
  op: "Reshape"
  input: "dnn/head/predictions/ArgMax"
  input: "dnn/head/predictions/classes/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/classes"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/maybe_expand_dim/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/maybe_expand_dim/ExpandDims"
  op: "ExpandDims"
  input: "Const_26"
  input: "dnn/head/maybe_expand_dim/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank/rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank/assert_type/statically_determined_correct_type"
  op: "NoOp"
  input: "^add"
}
node {
  name: "dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  op: "NoOp"
  input: "^add"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/x"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/assert_equal/x"
  input: "dnn/head/labels/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [batch_size, 1]"
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/labels/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/labels/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [batch_size, 1]"
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/labels/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^add"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/labels/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_1"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/assert_equal/x"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_4"
  input: "dnn/head/labels/strided_slice"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/maybe_expand_dim/ExpandDims"
  input: "^dnn/head/labels/assert_rank/static_checks_determined_all_ok"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Less"
  op: "Less"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less/Less"
  input: "dnn/head/assert_range/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^add"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must < n_classes"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^add"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^add"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less/All"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/data_3"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^add"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^add"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Label IDs must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^add"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^add"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/head/predictions/logits"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/predictions/logits"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/head/predictions/logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/head/predictions/logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/head/predictions/logits"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^add"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^add"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^add"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "weighted_loss/assert_broadcastable/weights"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "weighted_loss/assert_broadcastable/values/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^add"
}
node {
  name: "weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "weighted_loss/Const"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "weighted_loss/Sum"
  op: "Sum"
  input: "weighted_loss/Mul"
  input: "weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "weighted_loss/ones_like/Shape"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "weighted_loss/ones_like/Const"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weighted_loss/ones_like"
  op: "Fill"
  input: "weighted_loss/ones_like/Shape"
  input: "weighted_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "weighted_loss/mul"
  op: "Mul"
  input: "weighted_loss/ones_like"
  input: "weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "weighted_loss/Const_1"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "weighted_loss/Sum_1"
  op: "Sum"
  input: "weighted_loss/mul"
  input: "weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "weighted_loss/Const_2"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "weighted_loss/Sum_2"
  op: "Sum"
  input: "weighted_loss/Sum"
  input: "weighted_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "weighted_loss/Greater/y"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weighted_loss/Greater"
  op: "Greater"
  input: "weighted_loss/Sum_1"
  input: "weighted_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "weighted_loss/Equal/y"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weighted_loss/Equal"
  op: "Equal"
  input: "weighted_loss/Sum_1"
  input: "weighted_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "weighted_loss/ones_like_1/Shape"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "weighted_loss/ones_like_1/Const"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weighted_loss/ones_like_1"
  op: "Fill"
  input: "weighted_loss/ones_like_1/Shape"
  input: "weighted_loss/ones_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "weighted_loss/Select"
  op: "Select"
  input: "weighted_loss/Equal"
  input: "weighted_loss/ones_like_1"
  input: "weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "weighted_loss/div"
  op: "RealDiv"
  input: "weighted_loss/Sum_2"
  input: "weighted_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "weighted_loss/zeros_like"
  op: "Const"
  input: "^add"
  input: "^weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weighted_loss/value"
  op: "Select"
  input: "weighted_loss/Greater"
  input: "weighted_loss/div"
  input: "weighted_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/gradients/Fill"
  op: "Fill"
  input: "dnn/gradients/Shape"
  input: "dnn/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/Fill"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile/multiples"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/mul"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/mul_1"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^add"
  input: "^dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/mul"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dnn/head/predictions/logits"
  input: "dnn/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/mul_1"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/AddN"
  op: "AddN"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/AddN"
  input: "^dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/AddN"
  input: "^dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 33
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 537
          }
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 33
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Adagrad/learning_rate"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/Adagrad/learning_rate"
  input: "dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/Adagrad/learning_rate"
  input: "dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "dnn/Adagrad/learning_rate"
  input: "dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "dnn/Adagrad/learning_rate"
  input: "dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/Adagrad/learning_rate"
  input: "dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/Adagrad/learning_rate"
  input: "dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/Adagrad/update"
  op: "NoOp"
  input: "^add"
  input: "^dnn/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyAdagrad"
  input: "^dnn/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyAdagrad"
  input: "^dnn/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ApplyAdagrad"
  input: "^dnn/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ApplyAdagrad"
  input: "^dnn/Adagrad/update_dnn/logits/kernel/part_0/ApplyAdagrad"
  input: "^dnn/Adagrad/update_dnn/logits/bias/part_0/ApplyAdagrad"
}
node {
  name: "dnn/Adagrad/value"
  op: "Const"
  input: "^add"
  input: "^dnn/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_009a4540d0944501a47a7b4eee551f70/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "33 10 0,33:0,10"
        string_val: "33 10 0,33:0,10"
        string_val: "5 0,5"
        string_val: "5 0,5"
        string_val: "10 5 0,10:0,5"
        string_val: "10 5 0,10:0,5"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "5 1 0,5:0,1"
        string_val: "5 1 0,5:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/read"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "33 10 0,33:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "33 10 0,33:0,10"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "5 0,5"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "5 0,5"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 5 0,10:0,5"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "10 5 0,10:0,5"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/bias/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "1 0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "5 1 0,5:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dnn/logits/kernel/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "5 1 0,5:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 24
}
